window.shelbyBookmarklet = {


    shelbyProviders: [{
        "provider": "blip",
        "domain": "blip.tv",
        "regex": ["flash\\\/stratos\\.swf", "http:\\\/\\\/blip\\.tv\\\/play\\\/"],
        "url_regex": "([0-9]+)"
    }, {
        "provider": "brightcove",
        "domain": "brightcove.com",
        "regex": ["brightcove.com\\\/services\\\/viewer"]
    }, {
        "provider": "collegehumor",
        "domain": "collegehumor.com",
        "regex": ["videoid([0-9]+)", "clip_id=([0-9]+)"],
        "url_regex" : "([0-9]+)"
    }, {
        "provider": "dailymotion",
        "domain": "dailymotion.com",
        "regex": ["videoId%22%3A%22([a-zA-Z0-9]+)", "dailymotion.com%2Fvideo%2F([a-zA-Z0-9]+)_", "dailymotion\\.com\\\/embed\\\/video\\/([a-zA-Z0-9]+)", "dailymotion\\.com\\\/swf\\\/([a-zA-Z0-9]+)", "www.dailymotion.com\\\/video\\\/([a-zA-Z0-9]+)_"]
    },
    /*{ "domain": "hulu.com", "regex": ["http:\\\/\\\/player\\.hulu\\.com\\\/express\\\/.*?"] },*/ {
        "provider": "hulu",
        "domain": "hulu.com",
        "regex": ["\/site-player\/(\\d*)\/player"]
    }, /*{
        "provider": "pbs",
        "domain": "video.pbs.org",
        "regex": ["width=512&height=288.*&video=.*?\\\/([0-9]+)"]
    }, {
        "provider": "techcrunch",
        "domain": "techcrunch.tv",
        "regex": ["embedCode=(\\w*)"]
    },*/ {
        "provider": "ted",
        "domain": "ted.com",
        "regex": ["&amp;su=(http:\\\/\\\/www\\.ted\\.com.*?\\.html)&amp;", "&su=(http:\\\/\\\/www\\.ted\\.com.*?\\.html)&", "vu=http:\\\/\\\/video\\.ted\\.com\\\/.*?&su"]
    }, {
        "provider": "vimeo",
        "domain": "vimeo.com",
        "scrape_url": "http:\\\/\\\/(?:\\w+\\.)*vimeo\\.com\\\/([0-9]+)|http:\\\/\\\/(?:\\w+\\.)*vimeo\\.com.*clip_id=([0-9]+)",
        "regex": ["vimeo\\.com\\\/moogaloop\\.swf\\?clip_id=([0-9]+)", "clip_id=([0-9]+)&server=vimeo\\.com", "clip_id=([0-9]+)", "(player.vimeo.com\\/video\\/)(\\d*)", "(player)(\\d*)[^_]", "player_(\\d+)_\\d+"],
        "elements": "div.player.f:not(:has(video)):not(:has(object))"
    }, {
        "provider": "youtube",
        "domain": "youtube.com",
        "scrape_url": "http:\\\/\\\/(?:\\w+\\.)*youtube\\.com.*v=([\\_\\-a-zA-Z0-9]+)",
        "regex": ["&video_id=([\\_\\-a-zA-Z0-9]+)", "youtube\\.com\/v\/([\\_\\-a-zA-Z0-9]+)", "youtube\\-nocookie\\.com\/v\/([\\_\\-a-zA-Z0-9]+)", "youtube\\.com\/embed\/([\\_\\-a-zA-Z0-9]+)"]
    }, /*{
        "provider": "bloomberg",
        "domain": "bloomberg.com",
        "regex": ["embedCode=(\\w*)"]
    },*/ {
      "provider": "espn",
        "domain": "espn.com,espn.go.com",
        "regex": ["espn%3A([0-9]+)&"]
    }],

    shelbyRadar: function (shelbyJ, useUrl, urlProvider) {

        var radar = {

          getElementValue: function (obj, id) {
                var value = '';
                for (var i = 0; i < obj.attributes.length; i++) {
                    if (obj.attributes[i].nodeName === id) {
                        value += obj.attributes[i].nodeValue;
                        break;
                    }
                }

                var params = shelbyJ(obj).children('param');
                for (var i = 0; i < params.length; i++) {
                    if (params[i].name == id) {
                        value += params[i].value;
                        break;
                    }
                }
                return value;
            },



            composeKnownUrl : function (domain, video_id) {
                var known_url = "";
                switch (domain) {
                case 'blip.tv':
                    known_url = document.location.href;
                    break;
                case 'youtube.com':
                    known_url = "http://www.youtube.com/watch?v=" + video_id;
                    break;
                case 'dailymotion.com':
                    known_url = "http://www.dailymotion.com/video/" + video_id + "?";
                    break;
                case 'vimeo.com':
                    known_url = "http://vimeo.com/" + video_id;
                    break;
                case 'techcrunch.tv':
                    known_url = "http://techcrunch.tv/watch?id=" + video_id;
                    break;
                case 'video.pbs.org':
                    known_url = "http://video.pbs.org/video/" + video_id;
                    break;
                case 'collegehumor.com':
                    if (useUrl) {
                        known_url = document.location.href;
                    } else {
                        known_url = "http://collegehumor.com/video/" + video_id;
                    }
                    break;
                case 'hulu.com':
                    //HACK (For now).
                    // the video_id is the content_id, not useful when hitting embedly or our link cache
                    // so using the page location for now
                    known_url = document.location.href;
                    break;
                case 'bloomberg.com':
                    //HACK (For now).
                    // so using the page location for now
                    known_url = document.location.href;
                    break;
                case "espn.com,espn.go.com":
                    known_url = "http://espn.go.com/video/clip?id=" + video_id;
                    break;
                default:
                    known_url = false;
                }
                return known_url;
            },

            find: function (possibleVideos) {
                var videos_to_add = [];
                var found_elements = [];
                for (var i = 0; i < possibleVideos.embeds.length; i++) {
                    found_elements.push(possibleVideos.embeds[i]);
                }
                for (var i = 0; i < possibleVideos.videos.length; i++) {
                    found_elements.push(possibleVideos.videos[i]);
                }
                for (var i = 0; i < possibleVideos.iframes.length; i++) {
                    found_elements.push(possibleVideos.iframes[i]);
                }
                for (var i = 0; i < possibleVideos.objects.length; i++) {
                    if ((/<embed/i.test(possibleVideos.objects[i].innerHTML) || possibleVideos.embeds.length == 0) && (/<object/i.test(possibleVideos.objects[i].innerHTML))) {
                        found_elements.push(possibleVideos.objects[i]);
                    } else if(/video\.pbs\.org/.test(possibleVideos.objects[i].innerHTML)) {
                        found_elements.push(possibleVideos.objects[i]);
                    } else if (/vimeo\.com/i.test(possibleVideos.objects[i].innerHTML)) {
                        found_elements.push(possibleVideos.objects[i]);
                    } else if ((/<oolaya/i.test(possibleVideos.objects[i].innerHTML) || possibleVideos.embeds.length == 0) && (/<object/i.test(possibleVideos.objects[i].innerHTML))) {

                        found_elements.push(possibleVideos.objects[i]);
                    } else if ((/ooyala/i.test(possibleVideos.objects[i].className))) {
                        found_elements.push(possibleVideos.objects[i]);
                    }

                }
                for (var i=0; i < shelbyBookmarklet.shelbyProviders.length; i++) {
                    if (shelbyBookmarklet.shelbyProviders[i].elements) {
                        var domain_split = shelbyBookmarklet.shelbyProviders[i].domain.split(',');
                        for (var j = 0; j < domain_split.length; j++) {
                            if (window.location.hostname == domain_split[j]) {
                                var domainSpecificPossibleVideos = shelbyJ(shelbyBookmarklet.shelbyProviders[i].elements);
                                for (var k = 0; k < domainSpecificPossibleVideos.length; k++) {
                                    found_elements.push(domainSpecificPossibleVideos[k]);
                                }
                                break;
                            }
                        }
                    }
                }

                for (var i = 0; i < found_elements.length; i++) {
                    if (this.getElementValue(found_elements[i], 'data-youtube-id')) {
                        var obj = shelbyJ(found_elements[i]);
                        if (obj.height() < 100 && obj.width() < 100) {
                            continue;
                        }
                        videos_to_add.push({
                            embed: obj,
                            domain: "youtube.com",
                            video_id: this.getElementValue(found_elements[i], 'data-youtube-id')
                        });
                    } else {
                        var str = this.getElementValue(found_elements[i], 'flashvars') + '&amp;' + this.getElementValue(found_elements[i], 'src') + this.getElementValue(found_elements[i], 'data') + this.getElementValue(found_elements[i], 'name') + found_elements[i].innerHTML + found_elements[i].id;
                        for (var j = 0; j < shelbyBookmarklet.shelbyProviders.length; j++) {
                            if (useUrl && shelbyBookmarklet.shelbyProviders[j].provider !== urlProvider) {
                                continue;
                            }
                            for (var k = 0; k < shelbyBookmarklet.shelbyProviders[j].regex.length; k++) {
                                var reg = new RegExp(shelbyBookmarklet.shelbyProviders[j].regex[k]);
                                var domain_split = shelbyBookmarklet.shelbyProviders[j].domain.split(',');
                                var valid_domain = false;
                                for (var l = 0; l < domain_split.length; l++) {
                                  var domain_reg = new RegExp(shelbyJ.trim(domain_split[l]));
                                    if (domain_reg.test(str) || domain_reg.test(window.location)) {
                                        valid_domain = true;
                                        break;
                                    }
                                }
                                if (reg.test(str) && valid_domain) {
                                    var match = reg.exec(str);
                                    var obj = shelbyJ(found_elements[i]);
                                    if (obj.width() == 0) {
                                        obj = obj.parent();
                                    }
                                    if (match[2] == undefined) {
                                        if (match[1] == undefined) {
                                            match[1] = window.location.href;
                                        } else {
                                            match[2] = match[1];
                                        }
                                    }
                                    var provider = shelbyBookmarklet.shelbyProviders[j].provider;
                                    var video_id = match[2];
                                    if (useUrl) {
                                      var match = new RegExp(shelbyBookmarklet.shelbyProviders[j].url_regex).exec(window.location.href);
                                      video_id = match[1];
                                    }
                                    videos_to_add.push({
                                        embed: obj,
                                        domain: shelbyBookmarklet.shelbyProviders[j].domain,
                                        video_id: video_id,
                                        provider: provider,
                                        known_url: this.composeKnownUrl(shelbyBookmarklet.shelbyProviders[j].domain, match[2])
                                    });
                                    break;
                                }
                            }
                        }
                    }
                }
                return videos_to_add;
            }
        };
        return radar;
    },
    shelbyUtil: function (shelbyJ, shelbyGuideWidth) {

        var BackboneModel = function(props) {
          this.props = props;
        }

        BackboneModel.prototype = {
            get : function(prop) {
                return this.props[prop];
            },
            escape : function(prop) {
              return _.escape(this.props[prop]);
            },
            set : function(prop, val) {
                this.props[prop] = val;
            },
            toJSON: function() {
                return this.props;
            },
            getText : function() {
                return this.props.text;
            }

        }

        var utilObject = {
            shelbyCreateModel : function(properties) {
                return new BackboneModel(properties);
            },

            shelbyDocElements: {
                'ext-elements': shelbyJ(".ext-elements")
            },

            shelbyBkmkltUser: null,
            shelbyUserUtil : {
              shelbySignedInCallback: function(foundVids) {
                  return function (response) {
                    if (response.result.signed_in === false) {
                        utilObject.styleGuideShow("login-guide");
                        utilObject.htmlTemplate.loginGuideHtml();
                    } else {
                        utilObject.shelbyUserUtil.getUser(foundVids);
                    }
                  }
                },
                shelbyUserCallback: function(foundVids) {
                    return function (response) {
                      utilObject.shelbyBkmkltUser = response.result;
                      var authentications = response.result.authentications;
                      shelbyJ.ajax({
                          type: 'GET',
                          url: '//<%= Settings::Extension.api_domain %>/v1/roll/' + utilObject.shelbyBkmkltUser.personal_roll_id,
                          dataType: "jsonp",
                          crossDomain: true,
                          xhrFields: {
                              withCredentials: true
                          },
                          success: function (response) {
                              roll = response.result;
                              utilObject.shelbyBkmkltUser.personalRoll = roll;
                              shelbyJ.ajax({
                                type: "GET",
                                url: "//<%= Settings::Extension.api_domain%>/v1/video/queued/",
                                dataType: "jsonp",
                                data: {},
                                async: true,
                                xhrFields: {
                                  withCredentials: true
                                },
                                crossDomain: true,
                                success: function (response) {
                                  utilObject.queuedVideos = response.result;
                                  utilObject.sendVidsToShelby(foundVids);
                                }
                              });
                          }
                      });
                    }
                },
                signedIn: function (foundVids) {
                    shelbyJ.ajax({
                        type: 'GET',
                        url: '//<%= Settings::Extension.api_domain %>/v1/signed_in',
                        dataType: "jsonp",
                        crossDomain: true,
                        xhrFields: {
                            withCredential: true
                        },
                        success: utilObject.shelbyUserUtil.shelbySignedInCallback(foundVids)
                    });
                },
                getUser: function (foundVids) {
                    shelbyJ.ajax({
                        type: 'GET',
                        url: '//<%= Settings::Extension.api_domain %>/v1/user',
                        dataType: "jsonp",
                        crossDomain: true,
                        xhrFields: {
                            withCredentials: true
                        },
                        success: utilObject.shelbyUserUtil.shelbyUserCallback(foundVids)
                    });
                }
            },
            // in case we need special heights/wdiths for certain websites
            getHeight: function (jqueryVid) {
                return jqueryVid.height();
            },

            getWidth: function (jqueryVid) {
                return jqueryVid.width();
            },

            // make it a little higher than necessary so that overflow doesn't take out the border
            getTabVpos: function(vidTop) {
                return Math.ceil(vidTop - 2);
            },
            getTabHpos: function(vidLeft, tabWidth) {
                return vidLeft - tabWidth;
            },



            resizeFunction: function (vids, vidIndex, videoId) {
                var vid = vids[vidIndex];
                var tabWidth = shelbyJ('.bookmarklet-video-tab-' + videoId).width();
                shelbyJ('.bookmarklet-video-tab-' + videoId).css("left", utilObject.getTabHpos(vid.embed.offset().left, tabWidth)).css("top", utilObject.getTabVpos(vid.embed.offset().top));
            },

            resizeArray: [],
            videoInformation: {},

            sendVidsToShelby: function (foundVids, findMore) {
                var vids = [];
                for (var i = 0; i < foundVids.length; i++) {
                    if (foundVids[i].known_url !== false) {
                        vids.push(foundVids[i]);
                    }
                }
                if (window.isShelbyBookmarklet) {
                        if (vids.length == 0) {
                          utilObject.htmlTemplate.notifyNumVids(vids.length);
                        }
                }

                if (vids.length > 0) {
                    utilObject.htmlTemplate.notifyNumVids(vids.length, findMore);
                    for (var i = 0; i < vids.length; i++) {
                        var videoId = vids[i].video_id;
                        utilObject.videoInformation[videoId] = {video: null, frame: null, domain: vids[i].domain};
                        var height = utilObject.getHeight(vids[i].embed);
                        var width = utilObject.getWidth(vids[i].embed);
                        var vpos = vids[i].embed.offset().top;
                        var hpos = vids[i].embed.offset().left;
                        var frameInfoClass = "video-context-" + videoId;

                        // put buttons/headers here, we have hpos, vpos, fixed positions

                          utilObject.shelbyDocElements['ext-elements'].append(SHELBYJST['bookmarklet-video-tab']({videoId: videoId}));

                          utilObject.resizeFunction(vids, i, videoId);

                          shelbyJ("#control-on-page-" + videoId).addClass("buttons-show");


                          var resizeFunction = function(vidIndex, videoId) {
                              return function () {
                                  utilObject.resizeFunction(vids, vidIndex, videoId);
                              }
                          }(i, videoId);
                          shelbyJ("body").on('webkitTransitionEnd transitionend msTransitionEnd oTransitionEnd', function (event) {
                              resizeFunction();
                          });
                          utilObject.resizeArray.push(resizeFunction);

                        shelbyJ(".button-" + videoId).attr("data-frameclass", frameInfoClass).attr("data-videourl", vids[i].known_url);
                        var dataReq = {
                            'provider_name': vids[i].provider,
                            'provider_id': vids[i].video_id,
                            'url': vids[i].known_url
                        };

                        var setDashboardFrame = function (frameInfoClass, videoId) {
                                shelbyJ.ajax({
                                    type: "GET",
                                    url: "//<%= Settings::Extension.api_domain %>/v1/dashboard/find_entries_with_video",
                                    dataType: "jsonp",
                                    data: dataReq,
                                    crossDomain:true,
                                    async: true,
                                    xhrFields: {
                                        withCredentials: true
                                    },
                                    success: function (response) {
                                        var frames = response.result;
                                        if (response.result[0]) {
                                          utilObject.videoInformation[videoId].frame = response.result[0];
                                          utilObject.htmlTemplate.adjustFrameContext(frameInfoClass, videoId, true);
                                        }
                                    }
                              });
                        };

                        var setGuideContext = function (videoId, i) {
                                shelbyJ.ajax({
                                    type: "GET",
                                    url: "//<%= Settings::Extension.api_domain %>/v1/video/find_or_create",
                                    dataType: "jsonp",
                                    data: dataReq,
                                    async: true,
                                    xhrFields: {
                                        withCredentials: true
                                    },
                                    crossDomain : true,
                                    success: function (response) {
                                      var vidShelbyId = response.result.id;
                                      utilObject.videoInformation[videoId].video = response.result;
                                      var queuedVids = utilObject.queuedVideos;
                                      for (var i = 0; i < queuedVids.length; i++) {
                                        var queuedVid = queuedVids[i];
                                        if (queuedVid.id === vidShelbyId) {
                                          shelbyJ(".button-" + videoId + ".all-queue").addClass("queued");
                                          break;
                                        }
                                      }
                                    }
                                });
                        };
                        setGuideContext(videoId, i);
                        setDashboardFrame(frameInfoClass, videoId);
                    }
                    utilObject.shelbyDocElements['ext-elements'].off('click');
                  utilObject.shelbyContextButton.clickRoll();
                  utilObject.shelbyContextButton.clickQueue();
                  utilObject.shelbyContextButton.clickComment();
                }
            },
            shelbyContextButton : {
                  clickQueue : function() {

                      utilObject.shelbyDocElements['ext-elements'].on('click', ".all-queue", null, function (event) {
                        var queueButton = event.currentTarget;
                        var frameContextClass = queueButton.getAttribute("data-frameclass");
                        var videoId = queueButton.getAttribute("data-videoId");
                        if (shelbyJ(".button-" + videoId + ".all-queue").hasClass("queued")) {
                          return;
                        }
                        utilObject.shelbyAjaxCall.shelbyApiQueue(
                          queueButton.getAttribute("data-videourl"),
                          videoId,
                          function(response) {
                            shelbyJ(".button-" + videoId + ".all-queue").addClass("queued");
                            utilObject.htmlTemplate.notifyQueued();
                            if (!utilObject.videoInformation[videoId].frame) {
                              utilObject.videoInformation[videoId].frame = response.result;
                            }
                          });
                    });
                  },

                clickRoll : function() {
                        utilObject.shelbyDocElements['ext-elements'].on('click', ".all-roll", null, function (event) {
                          utilObject.styleGuideShow("roll-guide");
                          var rollButton = event.currentTarget;
                          var videoId = rollButton.getAttribute("data-videoId");
                          var user = utilObject.shelbyBkmkltUser;
                          var frameInfo = utilObject.videoInformation[videoId].frame;
                          var videoInfo = utilObject.videoInformation[videoId].video;
                          if (frameInfo) {
                              var creator = utilObject.shelbyCreateModel(frameInfo.creator);
                              var messageFirst = frameInfo.conversation.messages[0];
                              var messages = {
                                first: function() {
                                    return utilObject.shelbyCreateModel({text: messageFirst.text})
                                },
                                length: frameInfo.conversation.messages.length
                              };
                              var conversation = utilObject.shelbyCreateModel({"messages": messages});
                          } else {
                            var creator = utilObject.shelbyCreateModel({nickname: null});
                            var conversation = utilObject.shelbyCreateModel({messages: []});
                          }
                          var frameClass = rollButton.getAttribute("data-frameclass");
                          var backboneFrame = utilObject.shelbyCreateModel({'creator' : creator});
                          backboneFrame.set('video', utilObject.shelbyCreateModel(videoInfo));
                          backboneFrame.set('conversation', conversation);
                          shelbyJ("#roll-guide-window").html(SHELBYJST['frame-rolling']({frame: backboneFrame, user: utilObject.shelbyCreateModel(user)}));
                          shelbyJ(".select-roll-type").css("display", "none");
                          utilObject.htmlTemplate.rollingFormHtml(user.personalRoll, backboneFrame);
                          utilObject.handleRollSubmit(rollButton.getAttribute("data-videourl"), frameClass, videoId);
                          shelbyJ(".js-cancel").on("click", function(event) {
                              shelbyJ(".ext-elements #js-notifications").remove();
                              utilObject.styleGuideHide("roll-guide");
                          });
                          shelbyJ(".back").on("click", function(event) {
                              shelbyJ(".ext-elements #js-notifications").remove();
                              utilObject.styleGuideHide("roll-guide");
                          });
                    });
                },
                // if it is commentable there must be a frame associated with it
                clickComment : function() {
                    utilObject.shelbyDocElements['ext-elements'].on('click', ".all-comment", null, function (event) {
                        var commentButton = event.currentTarget;
                        var videoId = commentButton.getAttribute("data-videoId");
                        var frameInfo = utilObject.videoInformation[videoId].frame;
                        var conversationId = frameInfo.conversation_id;
                        var backboneFrame = utilObject.shelbyCreateModel({});
                        backboneFrame.set("conversation", utilObject.shelbyCreateModel(frameInfo.conversation));
                        backboneFrame.set("creator", utilObject.shelbyCreateModel(frameInfo.creator));
                        backboneFrame.set("video", utilObject.shelbyCreateModel(frameInfo.video));
                        var commentHtml = SHELBYJST["frame-conversation"]({frame: backboneFrame, user: utilObject.shelbyCreateModel(utilObject.shelbyBkmkltUser)});
                        shelbyJ("#comment-guide-window").html(commentHtml);
                        shelbyJ(".js-cancel").on("click", function(event) {
                            utilObject.styleGuideHide("comment-guide");
                        });
                        shelbyJ(".back").on("click", function(event) {
                            utilObject.styleGuideHide("comment-guide");
                        });
                        utilObject.shelbyDocElements['commentSubmit'] = shelbyJ(".new-comment-submit");
                        utilObject.shelbyDocElements['commentText'] = shelbyJ(".new-comment-input");
                        utilObject.htmlTemplate.setUpConversationWithId(conversationId, videoId);
                        utilObject.styleGuideShow("comment-guide");
                        utilObject.shelbyDocElements['commentSubmit'].off('click');
                        utilObject.shelbyDocElements['commentSubmit'].on('click', function (event) {
                            event.preventDefault();
                            var comment = utilObject.shelbyDocElements['commentText'].val();
                            utilObject.shelbyDocElements['commentText'].val('');
                            if (!comment || comment.length == 0) {
                                return;
                            }
                            var dataReq = {
                                'text': comment
                            };
                            utilObject.shelbyAjaxCall.shelbyApiComment(conversationId, dataReq, videoId);
                        });
                    });
                },
            },
            shelbyAjaxCall : {
                shelbyApiConversation: function(conversationId, conversationCB) {
                    if (!conversationId) {
                        conversationCB();
                    } else {
                      shelbyJ.ajax({
                          type: "GET",
                          dataType: "jsonp",
                          timeout: 10000,
                          data: {},
                          url: "//<%=Settings::Extension.api_domain%>/v1/conversation/" + conversationId,
                          xhrFields: {
                            withCredentials: true
                          },
                          async: true,
                          success: conversationCB,
                          error: function() {
                            utilObject.htmlTemplate.notifyMessage("Cannot find conversation");
                          }
                      });
                    }
                },


                shelbyApiComment: function (conversationId, dataReq, videoId) {
                    shelbyJ.ajax({
                        type: "GET",
                        dataType: "jsonp",
                        timeout: 10000,
                        data: dataReq,
                        url: "//<%= Settings::Extension.api_domain %>/v1/POST/conversation/" + conversationId + "/messages",
                        xhrFields: {
                            withCredentials: true
                        },
                        async: true,
                        success: function (response) {
                            utilObject.htmlTemplate.setUpConversationWithId(conversationId, videoId)
                        },
                        error: function () {
                            utilObject.htmlTemplate.notifyMessage("Cannot comment")
                        }
                    })
                },


                shelbyApiRoll: function (vid_url, roll_id, comment, callback) {
                    var reqData = {
                      'url': vid_url,
                      'text': comment
                    };

                    shelbyJ.ajax({
                        type: 'GET',
                        url: '//<%= Settings::Extension.api_domain %>/v1/POST/roll/' + roll_id + '/frames',
                        dataType: "jsonp",
                        timeout: 10000,
                        async: true,
                        crossDomain: true,
                        data: reqData,
                        xhrFields: {
                            withCredentials: true
                        },
                        success: function (response) {
                            callback(response);
                        },
                        error: function () {
                            utilObject.htmlTemplate.notifyMessage("Cannot roll");
                        }
                    });
                },

                //params:
                //  frame_id is the String Bson ID of the frame
                //  comment is the comment entered by the user
                //  destinations is an array of strings that is a subset of: ['twitter', 'facebook']
                shelbyApiShare: function(frame_id, comment, destinations, callback){
                  if(!frame_id || !comment || !destinations || destinations.length == 0){
                    return;
                  }

                  var reqData = {
                    'destination': destinations,
                    'text': comment
                  };

                  shelbyJ.ajax({
                      type: 'GET',
                      url: '//<%= Settings::Extension.api_domain %>/v1/POST/frame/'+frame_id+'/share',
                      dataType: "jsonp",
                      timeout: 10000,
                      async: true,
                      crossDomain: true,
                      data: reqData,
                      xhrFields: {
                          withCredentials: true
                      },
                      success: function (response) {
                          if(callback) callback(response);
                      },
                      error: function () {
                          utilObject.htmlTemplate.notifyMessage("Sharing failed.");
                      }
                  });

                },

                shelbyApiQueue: function(vid_url, video_id, callback) {
                    var frame = utilObject.videoInformation[video_id].frame;
                    if (frame) {
                      var reqData = {
                        id: frame.id
                      }
                      shelbyJ.ajax({
                          type: 'GET',
                          url: '//<%=Settings::Extension.api_domain%>/v1/POST/frame/' + frame.id + '/add_to_watch_later',
                          data: reqData,
                          timeout: 10000,
                          dataType: 'jsonp',
                          async: true,
                          crossDomain: true,
                          xhrFields: {
                            withCredentials: true
                          },
                          success: function(response) {
                            callback(response);
                          },
                          error : function() {
                            utilObject.htmlTemplate.notifyMessage("Cannot queue");
                          }
                      });
                    } else {
                      var comment = "Queued from " + utilObject.videoInformation[video_id].domain;
                      utilObject.shelbyAjaxCall.shelbyApiRoll (vid_url,
                          utilObject.shelbyBkmkltUser.watch_later_roll_id, comment, callback);
                    }
                }



            },

            handleRollSubmit : function (knownUrl, frameInfoClass, videoId) {
              var submitButton = shelbyJ("#js-roll-it");
              submitButton.off('click');
              submitButton.on('click', null, null, function (event) {
                var message = shelbyJ("#js-rolling-message").val();
                if (!message || message.length === 0) {
                  utilObject.htmlTemplate.notifyMessage("Please enter a comment");
                  return;
                }

                var shareDests = [];
                if(shelbyJ("#share-on-twitter").is(':checked')){ shareDests.push('twitter'); }
          			if(shelbyJ("#share-on-facebook").is(':checked')){ shareDests.push('facebook'); }

                rollCallback = function(response) {
                  //if sharing was enabled, do it, do it now (not waiting for success response to keep UX snappy)
                  var frame_id = response.result.id;
                  utilObject.shelbyAjaxCall.shelbyApiShare(frame_id, message, shareDests);

                  shelbyJ(".ext-elements #js-notifications").remove();
                  utilObject.styleGuideHide("roll-guide");
                  if (!utilObject.videoInformation[videoId].frame) {
                    utilObject.videoInformation[videoId].frame = response.result;
                  }
                  utilObject.htmlTemplate.adjustFrameContext(frameInfoClass, videoId, false);

                  //show success overlay
                  utilObject.htmlTemplate.notifyRolled();
                }
                utilObject.shelbyAjaxCall.shelbyApiRoll(knownUrl, utilObject.shelbyBkmkltUser.personal_roll_id, message, rollCallback);

                });
            },

            htmlTemplate : {
                messageHtml: function (message) {
                    return SHELBYJST['message']({message: utilObject.shelbyCreateModel(message), user: utilObject.shelbyCreateModel(utilObject.shelbyBkmkltUser)});
                },

                setUpConversation: function (messages, commentTextClass) {
                    var stringbuilder = "";
                    if (!messages) {
                        return;
                    }
                    shelbyJ(".conversation").html("");
                    for (var i = 0; i < messages.length; i++) {
                        var message = messages[i];
                        var messageElement = '<li class="conversation-message shelby-message-' + i.toString() + ' clearfix">' + utilObject.htmlTemplate.messageHtml(message) + '</li>';
                        shelbyJ(".conversation").append(messageElement);
                        shelbyJ(".shelby-message-" + i).on("click", ".js-message-reply", function(event) {
                            event.preventDefault();
                            utilObject.shelbyDocElements['commentText'].val('@' + event.currentTarget.getAttribute('data-reply_to') + " ");
                        });
                    }

                    shelbyJ("." + commentTextClass).html(messages.length);
                },


                setUpConversationWithId: function (conversationId, videoId) {
                    var commentTextClass = "comment-text-" + videoId;
                    var conversationCallback = function (response) {
                        var frame = utilObject.videoInformation[videoId].frame;
                        if (frame) {
                          frame.conversation = response.result;
                        }
                        utilObject.htmlTemplate.setUpConversation(response.result.messages, commentTextClass);
                    };
                    shelbyJ.ajax({
                        type: 'GET',
                        url: '//<%= Settings::Extension.api_domain %>/v1/conversation/' + conversationId,
                        dataType: "jsonp",
                        async: true,
                        crossDomain : true,
                        xhrFields: {
                            withCredentials: true
                        },
                        success: conversationCallback
                    });
                },


              setUpGuide: function (guideName, styleGuideWidth, loggedIn) {
                    utilObject.shelbyDocElements['ext-elements'].append('<div id=' + guideName + '-window class="' + guideName + ' guide-window guide-animate">  </div>');
                },

                adjustFrameContext: function (shelbyFrameClass, videoId, shouldOverwrite) {
                    var frameContext = shelbyJ("." + shelbyFrameClass);
                    var frame = utilObject.videoInformation[videoId].frame;
                    var creator = frame.creator;
                    if (creator.nickname == utilObject.shelbyBkmkltUser.nickname) {
                        shelbyJ(".comment-button-content").addClass("self");
                    }
                    var creatorUrl = "//<%=Settings::Extension.web_domain%>/user/" + creator.id + "/personal_roll";
                    if (!shouldOverwrite && shelbyJ("." + shelbyFrameClass).data("frameclass") !== undefined) {
                        return;
                    }
                    if (!frame || !frame.conversation) {
                        return;
                    }
                    frameContext.addClass("buttons-show").addClass("buttons-animate");
                    var videoId = frameContext.attr("data-videoId")
                    var frameContextContent = SHELBYJST['bookmarklet-context-content']({videoId: videoId, frame: frame, frameCreator: utilObject.shelbyCreateModel(frame.creator)});
                    shelbyJ(".frame-avatar-listitem-" + videoId + " .all-creator").html(frameContextContent);
                    shelbyJ(".frame-context-image-" + videoId).off("click");
                    shelbyJ(".frame-context-image-" + videoId).on("click",
                                                  function() {
                                                      window.open(creatorUrl)
                                                  });
                    frameContext.attr("data-conversationid", frame.conversation_id);
                    frameContext.attr("data-frameclass", frame.id);
                    frameContext.attr("data-nickname", frame.creator.nickname);
                    if (frame.conversation.messages) {
                      shelbyJ(".comment-text-" + videoId).html(frame.conversation.messages.length);
                    }
                },

                notifyMessage: function(message) {
                    var buttonOne = {
                        text: "Ok",
                        visible: true,
                        color: "blue"
                    };
                    var buttonTwo = {
                        visible: false
                    };
                    var model = {
                                  "class" : "default",
                                  "message": message,
                                  "number_of_buttons": 'one',
                                  "button_one": buttonOne,
                                  "button_two": buttonTwo};
                    shelbyJ(".ext-elements #js-notifications").remove();
                    utilObject.shelbyDocElements['ext-elements'].append(SHELBYJST['notification-overlay']({model: utilObject.shelbyCreateModel(model)}));
                    utilObject.shelbyDocElements['ext-elements'].on("click", "#js-notification-confirm", function() {
                        shelbyJ(".ext-elements #js-notifications").remove();
                    });


                },

                notifyNumVids: function(numVids, findMore) {
                    if (shelbyJ(".shelby-notify").length > 0) {
                        return;
                    }
                    utilObject.shelbyDocElements['ext-elements'].append(SHELBYJST['bookmarklet-notify']({'numVids': numVids, "findMore": findMore}));
                    if (findMore) {
                        shelbyJ(".shelby-notify").addClass("more");
                    }
                    shelbyJ(".shelby-notify").on("click", ".notify-cancel", function() {
                          shelbyJ('.shelby-notify').remove();
                    });
                    setTimeout(function() {
                          shelbyJ('.shelby-notify').remove();
                        }, 10000);
                    },

                notifyQueued: function() {
                        utilObject.shelbyDocElements['ext-elements'].append(SHELBYJST['bookmarklet-queued']());
                        setTimeout(function() {
                              shelbyJ(".fadein-notify-window").addClass("notified").on("click",
                                        function() {
                                            shelbyJ('.fadein-notify-window').remove();
                                });
                        }, 0);
                        setTimeout(function() {
                              shelbyJ('.fadein-notify-window').remove();
                        }, 3000)
                },

                notifyRolled: function() {
                        utilObject.shelbyDocElements['ext-elements'].append(SHELBYJST['bookmarklet-rolled']());
                        setTimeout(function() {
                              shelbyJ(".fadein-notify-window").addClass("notified").on("click",
                                        function() {
                                            shelbyJ('.fadein-notify-window').remove();
                                });
                        }, 0);
                        setTimeout(function() {
                              shelbyJ('.fadein-notify-window').remove();
                        }, 3000)
                },

                rollingFormHtml: function (personalRoll, backboneFrame) {
                        var backboneRoll = utilObject.shelbyCreateModel(personalRoll);
                        var backboneUser = utilObject.shelbyCreateModel(utilObject.shelbyBkmkltUser);
                        var templateObj = {
                          roll: backboneRoll,
                          frame: backboneFrame,
                          user: backboneUser,
                          rollOptions: {
                                pathForDisplay: backboneRoll.get("title"),
                                titleWithoutPath: "Personal Roll",
                                urlForRoll: backboneRoll.subdomain + ".shelby.tv"
                          }
                        }
                        shelbyJ(".rolling-main").append(SHELBYJST['rolling-form'](templateObj));
                },
                loginGuideHtml: function () {
                  shelbyJ('#login-guide-window').html(SHELBYJST['bookmarklet-login']({
                      twitterDomain: "//<%=Settings::Extension.api_domain%>/auth/twitter",
                      facebookDomain: "//<%=Settings::Extension.api_domain%>/auth/facebook",
                  }));
                  shelbyJ('.js-cancel').on('click', function() {
                      utilObject.styleGuideHide('login-guide');
                  });
                },

                frameRollersHtml : function(videoId) {
                    return SHELBYJST['bookmarklet-buttons']({videoId: videoId});
                }
            },
            styleGuideShow: function(guideName) {
                shelbyJ(".guide-window").removeClass("guide-show");
                shelbyJ("#" + guideName + "-window").removeClass("guide-hide")
                setTimeout(function() {
                    shelbyJ("#" + guideName + "-window").addClass("guide-show");
                }, 0);
            },

            // style guide hide will never be called on frame guide
            styleGuideHide: function (guideName) {
                shelbyJ("#" + guideName + "-window").removeClass("guide-show")
            },

            foundVideo: null,

            shelbify: function (radar) {
                var possibleVideos = {
                    embeds: shelbyJ('embed'),
                    objects: shelbyJ('object'),
                    videos: shelbyJ('video'),
                    iframes: shelbyJ('iframe')
                };

                var foundVideos = radar.find(possibleVideos);
                if (!window.libs) {
                  window.libs = {shelbyGT: {RollModel: {}}};
                  window.libs.shelbyGT.RollModel.TYPES = {
                        // special rolls that have not yet been updated to their specific type default to :special_roll
                        special_roll : 10,
                        special_public : 11,
                        special_hearted : 12,
                        special_watch_later : 13,
                        // special rolls are < all_special_rolls (convenience)
                        all_special_rolls: 14,

                        // User-created non-collaborative public rolls (previously these were collaborative, we're changing that)
                        user_public : 30,
                        // Company-created collaborative public rolls
                        global_public : 31,
                        // User-created collaborative private rolls
                        user_private : 50,

                        genius : 70
                  };
                }

                // DEBT Should refactor this out into a helper method instead of an inline function
                var reRunVideoSearch = function(){
                  if (!utilObject.shelbyBkmkltUser) {
                    return;
                  }
                  var newPossibleVideos = {
                      embeds: shelbyJ('embed'),
                      objects: shelbyJ('object'),
                      videos: shelbyJ('video'),
                      iframes: shelbyJ('iframe')
                  };

                  var refoundVideos = radar.find(newPossibleVideos);
                  var newVideos = []
                  for (var i = 0; i < refoundVideos.length; i++) {
                      var refoundId = refoundVideos[i].video_id;
                      if (!utilObject.videoInformation[refoundId]) {
                          newVideos.push(refoundVideos[i]);
                      }
                  }
                  if (newVideos.length > 0) {
                      utilObject.sendVidsToShelby(newVideos, true);
                  } else {
                      return;
                  }
                };

                //every 2 seconds re-run the search for videos (up to 5 times)
                var searchesRan = 0;
                var searchInterval = setInterval(function(){
                  reRunVideoSearch();
                  if(searchesRan++ == 5) clearInterval(searchInterval);
                }, 2*1000);

                // Also re-run the search after a click
                shelbyJ("body").on("click", function() { reRunVideoSearch(); });

                utilObject.htmlTemplate.setUpGuide("roll-guide", shelbyGuideWidth, true);
                utilObject.htmlTemplate.setUpGuide("comment-guide", shelbyGuideWidth, true);
                utilObject.htmlTemplate.setUpGuide("login-guide", shelbyGuideWidth, false);
                shelbyJ(".ext-elements").on('webkitTransitionEnd transitionend msTransitionEnd oTransitionEnd', '.guide-window', function(event) {
                        var guideWindow = shelbyJ("#" + event.currentTarget.getAttribute("id"));
                        if (!guideWindow.hasClass("guide-show")) {
                            guideWindow.addClass("guide-hide");
                        }
                    }
                );
                utilObject.shelbyUserUtil.signedIn(foundVideos);
                shelbyJ(window).resize(function () {
                    for (var i = 0; i < utilObject.resizeArray.length; i++) {
                        utilObject.resizeArray[i]();
                    }
                });
            }
        }
        return utilObject;
    },

    shelbyInit: function (opts, useUrl, urlProvider) {
        fullFunc(opts(useUrl, urlProvider));
    },
    shelbyOpts: function (useUrl, urlProvider) {
        var radarStart =  function () {
                var shelbyJ = jQuery.noConflict();
                var shelbyGuideWidth = 330;

                // add in the bookmarklet loading bar
                shelbyJ('.ext-elements').remove();
                shelbyJ('body').append('<div class=ext-elements></div>');
                var radar = shelbyBookmarklet.shelbyRadar(shelbyJ, useUrl, urlProvider);
                shelbyBookmarklet.shelbyUtil(shelbyJ, shelbyGuideWidth).shelbify(radar);
        }
        var cssArray = (window.SHELBYJST) ? [] :  ["//<%= Settings::Extension.web_domain%>/assets/extension.css"];
        var jsArray =  (window.SHELBYJST) ? [] :  ["//<%= Settings::Extension.web_domain%>/assets/extension/includes.js"];
        return {
            css: cssArray,
            js: jsArray,
            jqpath: "//ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js",
            ready: radarStart
        }
    }
}

function fullFunc(a){function d(b,g){if(b.length===0){a.ready();return false}g.getScript(b[0],function(){d(b.slice(1))})}function e(b,g){g.each(b,function(c,f){g("<link>").attr({href:f,rel:"stylesheet"}).appendTo("head")})}a.jqpath=a.jqpath||"//ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js";(function(b){var c=document.createElement("script");c.type="text/javascript";c.src=b;;c.onload=function(){var g=jQuery.noConflict(); e(a.css,g);d(a.js,g)};document.body.appendChild(c)})(a.jqpath)};

var loadBookmarklet = function(useUrl, useProvider) {
  shelbyBookmarklet.shelbyInit(shelbyBookmarklet.shelbyOpts, useUrl, useProvider);
};

(function(history) {
    var pushState = history.pushState;
    history.pushState = function(state) {
        if (typeof history.onpushstate == "function") {
            history.onpushstate({state: state});
        }
        for (var i = 0; i < shelbyBookmarklet.shelbyProviders.length; i++) {
            var domain_split = shelbyBookmarklet.shelbyProviders[i].domain.split(',');
            var valid_domain = false;
            for (var l = 0; l < domain_split.length; l++) {
                var domain_reg = new RegExp(domain_split[l]);
                if (domain_reg.test(window.location.href)) {
                    valid_domain = true;
                    break;
                }
            }
            if (valid_domain) {
                var providerObj = shelbyBookmarklet.shelbyProviders[i];
                if (providerObj.url_regex) {
                    if (new RegExp(providerObj.url_regex).test(window.location.href)) {
                        loadBookmarklet(true, providerObj.provider);
                        return pushState.apply(history, arguments);
                    }
                }
            }
        }
        if (!shelbyJ) {
          var shelbyJ = jQuery.noConflict();
        }
        shelbyJ('.ext-elements').remove()
        return pushState.apply(history, arguments);
    }
})(window.history);

loadBookmarklet(false);
