<%

var pusher = new Pusher(shelby.config.pusher_key);
console.log("PUSHER>BINDINGS");
// get remote control code
$.post(shelby.config.apiRoot+'/remote_control', function(r){
  if (r.status == 200){
    // print url
    console.log("[SHELBY] Remote Control URL : ", r.result.url);
    
    $('.guide-nav-item').empty();
    $('.guide-nav-item').first().text(r.result.url);
    $('.guide-nav-item').css('color', 'white').css('margin-top','10px');
    // subscribe to correct channel
    var channel = pusher.subscribe('remote-'+r.result.code);
    
    channel.bind('up', function(data) {
      console.log('command received: up', data);
      shelby.models.userDesires.triggerTransientChange('changeChannel', 1);
    });
		
    channel.bind('down', function(data) {
      console.log('command received: down', data);
      shelby.models.userDesires.triggerTransientChange('changeChannel', -1);
    });
		
    channel.bind('left', function(data) {
      console.log('command received: left', data);
      shelby.models.userDesires.triggerTransientChange('changeVideo', -1);
    });

    channel.bind('right', function(data) {
      console.log('command received: right', data);
      shelby.models.userDesires.triggerTransientChange('changeVideo', 1);
    });

    channel.bind('enter', function(data) {
      console.log('command received: enter', data);
      var activePlayerState = shelby.models.playbackState.get('activePlayerState');
      if (activePlayerState) {
        var _newPlaybackStatus = (activePlayerState.get('playbackStatus')===libs.shelbyGT.PlaybackStatus.playing) ? libs.shelbyGT.PlaybackStatus.paused : libs.shelbyGT.PlaybackStatus.playing;
        shelby.models.userDesires.triggerTransientChange('playbackStatus', _newPlaybackStatus);
      }
    });
		
		channel.bind('play', function(data){
	    console.log('command received: play', data);
			var video = data;

			for (var key in video) {
				video[key] = decodeURIComponent(video[key]);
			}
			
			var currentIndex = shelby.collections.multiplexedVideoFrames.indexOf(shelby.models.guide.get('activeFrameModel'))
			var currentFrameId = shelby.models.guide.get('activeFrameModel').id;
			var idString = currentFrameId.charCodeAt(currentFrameId.length - 1);
			idString = String.fromCharCode(idString + 1);
			var newFrameId = currentFrameId.slice(0,currentFrameId.length-1) + idString;
			var newFrameFromVideo = new libs.shelbyGT.FrameModel({
	        id : newFrameId,//video.provider_name+":"+video.provider_id,
	        video : video,
	        conversation : {
	          messages : [
	            {
	              text : video.description
	            }
	          ]
	        },
	        isSearchResultFrame : true
	      });
			
			console.log("newFrameFromVideo: ", newFrameFromVideo);
	
			shelby.collections.multiplexedVideoFrames.add(newFrameFromVideo, {index: currentIndex+1});
			shelby.collections.multiplexedVideoFrames.sort();
		});
  }
});


%>