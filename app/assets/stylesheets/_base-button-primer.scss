////////////////////////////////////////////////////////////////////////////
//  "for now"
//  specific padding mixins so you don't lose consistency
////////////////////////////////////////////////////////////////////////////
@function button-padding($usage) {
  @if $usage == isolated-roll-header {
    @return 0.5em 1em;
  }
}

@mixin button-sizing($use: generic) {
    @if $use == frame-command {
    padding-top: .8em;
    padding-right: 1em;
    padding-bottom: .75em;
    padding-left: 1em;
  } @elseif $use == explore-rolls {
    padding-top: .8em;
    padding-bottom: .75em;
    //------------------------------------------------------
    //  follow/unfollow need to be the same size.
    //  setting the WIDTH normalizes them,
    //  rather than having the width delegated by the padding
    //------------------------------------------------------
    width: 100px;
  } @elseif $use == cancel {
    padding: .5em;
  } @elseif $use == wide {
    padding-top: .8em;
    padding-right: 3em;
    padding-bottom: .75em;
    padding-left: 3em;
  } @elseif $use == guide-close {
    padding: .6em;
  } @elseif $use == generic {//generic
    padding-top: .75em;
    padding-right: 1em;
    padding-bottom: .75em;
    padding-left: 1em;
  }
}
//------------------------------------------------------------------------------
//  $color-names and $color-values
//  the indexes of each correspond.
//  (Sass doesn't have multi-dimensional arrays or anything really cool,
//  so we have to fake it by matching the indexes of two arrays.)
//------------------------------------------------------------------------------
@function name-to-value($name) {
  ////////////////////////////////////////////////////////////////////////////
  //  cool little look-up table technique lifted from D. Eppstein
  //  https://groups.google.com/forum/#!msg/sass-lang/upr78cyrW1I/_5xLPA9yYjUJ
  ////////////////////////////////////////////////////////////////////////////
  @return nth($color-values, index($color-names, $name));
}

//------------------------------------------------------------------------------
//  Button Primer
//------------------------------------------------------------------------------
.button_primer {
  @include roundies(input);

  font-family: $font-family-display;
  -moz-user-select: none;
  -webkit-user-select: none;
  -ms-user-select: none;

  &:not([disabled]):not(.disabled):not(.visuallydisabled):hover {
      cursor: pointer;
  }

  &.visuallydisabled,
  &.disabled {
      cursor: default;
  }

  &:not([disabled]):not(.disabled):not(.visuallydisabled):focus {
      border: 1px solid black;
      outline: none;
  }
}
////////////////////////////////////////////////////////////////////////////
//  faux_button should be applied to
//  elements that will be styled by .button_primer
//  but are not <button> elements, i.e. <a> elements
////////////////////////////////////////////////////////////////////////////
.faux_button {
    display: inline-block;

    &:active,
    &:hover,
    &:link,
    &:visited {
        text-decoration: none;
    }
}

////////////////////////////////////////////////////////////////////////////
//  REFERENCE TABLE
//  ---------------------
//  blue       : #0590c4;
//  default    : #eeeeee;
//  gray       : #27292A;
//  gray-light : #a0a0a0;
//  green      : #428e3a;
//  purple     : #693a7b;
//  red        : #cc1235;
//  yellow     : #d5cd39;
////////////////////////////////////////////////////////////////////////////
    $color-names:
    blue       ,
    default    ,
    gray       ,
    gray-light ,
    gray-medium,
    green      ,
    purple     ,
    red        ,
    yellow     ;

    $color-values:
    #0590c4,
    #eeeeee,
    #27292A,
    #a0a0a0,
    #dddddd,
    #428e3a,
    #693a7b,
    #cc1235,
    #d5cd39;