window.shelbyBookmarklet = {

    shelbyProviders: [{
        "provider": "blip",
        "domain": "blip.tv",
        "regex": ["flash\\\/stratos\\.swf", "http:\\\/\\\/blip\\.tv\\\/play\\\/"]
    }, {
        "provider": "brightcove",
        "domain": "brightcove.com",
        "regex": ["brightcove.com\\\/services\\\/viewer"]
    }, {
        "provider": "collegehumor",
        "domain": "collegehumor.com",
        "regex": ["videoid([0-9]+)", "clip_id=([0-9]+)"],
        "url_regex" : "([0-9]+)"
    }, {
        "provider": "dailymotion",
        "domain": "dailymotion.com",
        "regex": ["videoId%22%3A%22([a-zA-Z0-9]+)", "dailymotion.com%2Fvideo%2F([a-zA-Z0-9]+)_", "dailymotion\\.com\\\/embed\\\/video\\/([a-zA-Z0-9]+)", "dailymotion\\.com\\\/swf\\\/([a-zA-Z0-9]+)", "www.dailymotion.com\\\/video\\\/([a-zA-Z0-9]+)_"]
    },
    /*{ "domain": "hulu.com", "regex": ["http:\\\/\\\/player\\.hulu\\.com\\\/express\\\/.*?"] },*/ {
        "provider": "hulu",
        "domain": "hulu.com",
        "regex": ["\/site-player\/(\\d*)\/player"]
    }, {
        "provider": "pbs",
        "domain": "video.pbs.org",
        "regex": ["width=512&height=288&video=.*?\\\/([0-9]+)"]
    }, {
        "provider": "techcrunch",
        "domain": "techcrunch.tv",
        "regex": ["embedCode=(\\w*)"]
    }, {
        "provider": "ted",
        "domain": "ted.com",
        "regex": ["&amp;su=(http:\\\/\\\/www\\.ted\\.com.*?\\.html)&amp;", "&su=(http:\\\/\\\/www\\.ted\\.com.*?\\.html)&", "vu=http:\\\/\\\/video\\.ted\\.com\\\/.*?&su"]
    }, {
        "provider": "vimeo",
        "domain": "vimeo.com",
        "scrape_url": "http:\\\/\\\/(?:\\w+\\.)*vimeo\\.com\\\/([0-9]+)|http:\\\/\\\/(?:\\w+\\.)*vimeo\\.com.*clip_id=([0-9]+)",
        "regex": ["vimeo\\.com\\\/moogaloop\\.swf\\?clip_id=([0-9]+)", "clip_id=([0-9]+)&server=vimeo\\.com", "clip_id=([0-9]+)", "(player.vimeo.com\\/video\\/)(\\d*)", "(player)(\\d*)"]
    }, {
        "provider": "youtube",
        "domain": "youtube.com",
        "scrape_url": "http:\\\/\\\/(?:\\w+\\.)*youtube\\.com.*v=([\\_\\-a-zA-Z0-9]+)",
        "regex": ["&video_id=([\\_\\-a-zA-Z0-9]+)", "youtube\\.com\/v\/([\\_\\-a-zA-Z0-9]+)", "youtube\\-nocookie\\.com\/v\/([\\_\\-a-zA-Z0-9]+)", "youtube\\.com\/embed\/([\\_\\-a-zA-Z0-9]+)"]
    }, {
        "provider": "bloomberg",
        "domain": "bloomberg.com",
        "regex": ["embedCode=(\\w*)"]
    }],

    shelbyRadar: function (shelbyJ, useUrl, urlProvider) {
        var radar = {

            getElementValue: function (obj, id) {
                var value = '';
                for (var i = 0; i < obj.attributes.length; i++) {
                    if (obj.attributes[i].nodeName === id) {
                        value += obj.attributes[i].nodeValue;
                        break;
                    }
                }

                var params = shelbyJ(obj).children('param');
                for (var i = 0; i < params.length; i++) {
                    if (params[i].name == id) {
                        value += params[i].value;
                        break;
                    }
                }
                return value;
            },



            composeKnownUrl: function (domain, video_id) {
                var known_url = "";
                switch (domain) {
                case 'youtube.com':
                    known_url = "http://www.youtube.com/watch?v=" + video_id;
                    break;
                case 'dailymotion.com':
                    known_url = "http://www.dailymotion.com/video/" + video_id;
                    break;
                case 'vimeo.com':
                    known_url = "http://vimeo.com/" + video_id;
                    break;
                case 'techcrunch.tv':
                    known_url = "http://techcrunch.tv/watch?id=" + video_id;
                    break;
                case 'collegehumor.com':
                    if (useUrl) {
                        known_url = document.location.href;
                    } else {
                        known_url = "http://collegehumor.com/video/" + video_id;
                    }
                    break;
                case 'hulu.com':
                    //HACK (For now).
                    // the video_id is the content_id, not useful when hitting embedly or our link cache
                    // so using the page location for now
                    known_url = document.location.href;
                    break;
                case 'bloomberg.com':
                    //HACK (For now).
                    // so using the page location for now
                    known_url = document.location.href;
                    break;
                default:
                    known_url = false;
                }
                return known_url;
            },

            find: function (possibleVideos) {
                var videos_to_add = [];
                var found_elements = [];
                for (var i = 0; i < possibleVideos.embeds.length; i++) {
                    found_elements.push(possibleVideos.embeds[i]);
                }
                for (var i = 0; i < possibleVideos.videos.length; i++) {
                    found_elements.push(possibleVideos.videos[i]);
                }
                for (var i = 0; i < possibleVideos.iframes.length; i++) {
                    found_elements.push(possibleVideos.iframes[i]);
                }
                for (var i = 0; i < possibleVideos.objects.length; i++) {
                    if ((/<embed/i.test(possibleVideos.objects[i].innerHTML) || possibleVideos.embeds.length == 0) && (/<object/i.test(possibleVideos.objects[i].innerHTML))) {
                        found_elements.push(possibleVideos.objects[i]);
                    } else if (/vimeo\.com/i.test(possibleVideos.objects[i].innerHTML)) {
                        found_elements.push(possibleVideos.objects[i]);
                    } else if ((/<embed/i.test(possibleVideos.objects[i].innerHTML) || possibleVideos.embeds.length == 0) && (/<ooyala/i.test(possibleVideos.objects[i].innerHTML))) found_elements.push(possibleVideos.objects[i]);
                }
                for (var i = 0; i < found_elements.length; i++) {
                    if (this.getElementValue(found_elements[i], 'data-youtube-id')) {
                        var obj = shelbyJ(found_elements[i]);
                        videos_to_add.push({
                            embed: obj,
                            domain: "youtube.com",
                            video_id: this.getElementValue(found_elements[i], 'data-youtube-id')
                        });
                    } else {
                        var str = this.getElementValue(found_elements[i], 'flashvars') + '&amp;' + this.getElementValue(found_elements[i], 'src') + this.getElementValue(found_elements[i], 'data') + this.getElementValue(found_elements[i], 'name') + found_elements[i].innerHTML + found_elements[i].id;
                        for (var j = 0; j < shelbyBookmarklet.shelbyProviders.length; j++) {
                            if (useUrl && shelbyBookmarklet.shelbyProviders[j].provider !== urlProvider) { 
                                continue;
                            }
                            for (var k = 0; k < shelbyBookmarklet.shelbyProviders[j].regex.length; k++) {
                                var reg = new RegExp(shelbyBookmarklet.shelbyProviders[j].regex[k]);
                                var domain_split = shelbyBookmarklet.shelbyProviders[j].domain.split(',');
                                var valid_domain = false;
                                for (var l = 0; l < domain_split.length; l++) {
                                    var domain_reg = new RegExp(shelbyJ.trim(domain_split[l]));
                                    if (domain_reg.test(str) || domain_reg.test(window.location)) {
                                        valid_domain = true;
                                        break;
                                    }
                                }
                                if (reg.test(str) && valid_domain) {
                                    var match = reg.exec(str);
                                    var obj = shelbyJ(found_elements[i]);
                                    if (obj.width() == 0) {
                                        obj = obj.parent();
                                    }
                                    if (match[2] == undefined) {
                                        if (match[1] == undefined) {
                                            match[1] = window.location.href;
                                        } else {
                                            match[2] = match[1];
                                        }
                                    }
                                    var provider = shelbyBookmarklet.shelbyProviders[j].provider;
                                    var video_id = match[2];
                                    if (useUrl) {
                                      var match = new RegExp(shelbyBookmarklet.shelbyProviders[j].url_regex).exec(window.location.href);
                                      video_id = match[1];
                                    }
                                    videos_to_add.push({
                                        embed: obj,
                                        domain: shelbyBookmarklet.shelbyProviders[j].domain,
                                        video_id: video_id,
                                        provider: provider,
                                        known_url: this.composeKnownUrl(shelbyBookmarklet.shelbyProviders[j].domain, match[2])
                                    });
                                    break;
                                }
                            }
                        }
                    }
                }
                return videos_to_add;
            }
        };
        return radar;
    },
    shelbyUtil: function (shelbyJ, shelbyGuideWidth) {

        var utilObject = {

            shelbyDocElements: {
                'ext-elements': shelbyJ(".<%=@prefix%>ext-elements")
            },

            shelbyBkmkltUser: null,
            shelbyUserUtil : {
                shelbySignedInCallback: function (response) {
                    if (response.result.signed_in === false) {
                        utilObject.styleGuideShow("<%=@prefix%>login-guide");
                        utilObject.htmlTemplate.loginGuideHtml();
                    } else {
                        utilObject.shelbyUserUtil.getUser();
                    }
                },
                shelbyUserCallback: function (response) {
                    utilObject.shelbyBkmkltUser = response.result;
                    var authentications = response.result.authentications;
                    utilObject.htmlTemplate.commentGuideHtml();
                    utilObject.htmlTemplate.shareGuideHtml(authentications);
                    shelbyJ('.<%=@prefix%>guide-overlay-context-creator').html(response.result.nickname);
                    shelbyJ.ajax({
                        type: 'GET',
                        url: 'http://<%= Settings::VideoRadar.api_domain %>/v1/user/' + utilObject.shelbyBkmkltUser.id + '/rolls/postable',
                        dataType: "jsonp",
                        crossDomain: true,
                        xhrFields: {
                            withCredentials: true
                        },
                        success: function (response) {
                            rolls = response.result;
                            utilObject.htmlTemplate.rollGuideHtml(rolls);
                            utilObject.sendVidsToShelby(utilObject.foundVideo, true);
                        }
                    });

                },
                signedIn: function () {
                    shelbyJ.ajax({
                        type: 'GET',
                        url: 'http://<%= Settings::VideoRadar.api_domain %>/v1/signed_in',
                        dataType: "jsonp",
                        crossDomain: true,
                        xhrFields: {
                            withCredential: true
                        },
                        success: utilObject.shelbyUserUtil.shelbySignedInCallback
                    });
                },
                getUser: function () {
                    shelbyJ.ajax({
                        type: 'GET',
                        url: 'http://<%= Settings::VideoRadar.api_domain %>/v1/user',
                        dataType: "jsonp",
                        crossDomain: true,
                        xhrFields: {
                            withCredentials: true
                        },
                        success: utilObject.shelbyUserUtil.shelbyUserCallback
                    });
                }
            },             
            // in case we need special heights/wdiths for certain websites       
            getHeight: function (jqueryVid) {
                return jqueryVid.height();
            },

            getWidth: function (jqueryVid) {
                return jqueryVid.width();
            },

            getHeaderVpos: function (vidHeight, vidTop, header) {
                return vidTop - header.height();
            },
            getFooterVpos: function (vidHeight, vidTop) {
                return vidHeight + vidTop;
            },



            resizeFunction: function (vids, vidIndex, r) {
                var vid = vids[vidIndex];
                var height = utilObject.getHeight(vid.embed);
                var width = utilObject.getWidth(vid.embed);
                shelbyJ('#<%=@prefix%>control-on-page-' + r).css("left", vid.embed.offset().left).css("width", width).css("top", utilObject.getFooterVpos(height, vid.embed.offset().top));
                shelbyJ('#<%=@prefix%>header-on-page-' + r).css("left", vid.embed.offset().left).css("width", width).css("top", utilObject.getHeaderVpos(height, vid.embed.offset().top, header));
            },

            resizeArray: [],



            sendVidsToShelby: function (vids, embedButtons) {
                var self = this;
                if (vids.length > 0) {
                    for (var i = 0; i < vids.length; i++) {
                        if (vids[i].known_url !== false) {
                            var r = vids[i].video_id;
                            var height = utilObject.getHeight(vids[i].embed);
                            var width = utilObject.getWidth(vids[i].embed);
                            var vpos = vids[i].embed.offset().top;
                            var hpos = vids[i].embed.offset().left;
                            var frameInfoClass = "<%=@prefix%>video-header-" + r;

                            // put buttons/headers here, we have hpos, vpos, fixed positions

                            var footerHtml = utilObject.htmlTemplate.frameFooterHtml(r);
                            utilObject.htmlTemplate.addFrameToGuide(footerHtml, r, vids[i].embed);
                            if (embedButtons) {
                                utilObject.shelbyDocElements['ext-elements'].append('<div class="<%=@prefix%> embedded-header <%=@prefix%>video-card-header clearfix ' + frameInfoClass + '" id="<%=@prefix%>header-on-page-' + r + '" data-r=' + r + '>' + '<div class=<%=@prefix%>frame-logo>' + '<img class="<%=@prefix%>frame-logo-img"src="http://gt.shelby.tv/images/assets/shelby_logo.png"/> </div>' + '</div>');

                                header = shelbyJ("#<%=@prefix%>header-on-page-" + r)
                                header.css("left", hpos + "px").css("top", utilObject.getHeaderVpos(height, vpos, header) + "px").css("width", width + "px")

                                utilObject.shelbyDocElements['ext-elements'].append('<ul id="<%=@prefix%>control-on-page-' + r + '" class="<%=@prefix%>embedded-footer <%=@prefix%>frame-controls clearfix ' + ' <%=@prefix%>found-video-' + r + '" type="toolbar"> </ul>');
                                
                                var vidFooter = shelbyJ('#<%=@prefix%>control-on-page-' + r);
                                vidFooter.html(footerHtml);
                                vidFooter.css("left", hpos + "px").css("top", utilObject.getFooterVpos(vpos, height) + "px").css("width", width + "px")
                                shelbyJ(".<%=@prefix%>button-" + r).attr("data-frameclass", frameInfoClass).attr("data-videourl", vids[i].known_url);
                                var resizeFunction = function(vidIndex, r) {
                                    return function () {
                                        utilObject.resizeFunction(vids, vidIndex, r);
                                    }
                                }(i, r);
                                shelbyJ("body").on('webkitTransitionEnd transitionend msTransitionEnd oTransitionEnd', function (event) {
                                    resizeFunction();
                                });
                                utilObject.resizeArray.push(resizeFunction);
                            }
                            var dataReq = {
                                'provider_name': vids[i].provider,
                                'provider_id': vids[i].video_id,
                                'url': vids[i].known_url
                            };
                            
                            var setDashboardFrame = function (frameInfoClass) {
                                    shelbyJ.ajax({
                                        type: "GET",
                                        url: "http://<%= Settings::VideoRadar.api_domain %>/v1/dashboard/find_entries_with_video",
                                        dataType: "jsonp",
                                        data: dataReq,
                                        crossDomain:true,
                                        async: true,
                                        xhrFields: {
                                            withCredentials: true
                                        },
                                        success: function (response) {
                                            var frames = response.result;
                                            utilObject.htmlTemplate.adjustFrameHeader(frames[0], frameInfoClass, true);
                                        }
                                  });
                            };
                         
                            var setGuideHeader = function (r, i) {
                                  var imgClassName = r + "-img";
                                    shelbyJ.ajax({
                                        type: "GET",
                                        url: "http://<%= Settings::VideoRadar.api_domain %>/v1/video/find_or_create",
                                        dataType: "jsonp",
                                        data: dataReq,
                                        async: true,
                                        xhrFields: {
                                            withCredentials: true
                                        },
                                        crossDomain : true,
                                        success: function (response) {
                                            var imageUrl =  "url('" + response.result.thumbnail_url + "')";

                                            shelbyJ('#video-card-' + r).css("background-image", imageUrl);
                                            shelbyJ("." + imgClassName).on('click', function () {
                                                shelbyJ('.<%=@prefix%>guide-overlay-context-title').html(response.result.title);
                                                shelbyJ('.<%=@prefix%>guide-overlay-context').css("background-image", imageUrl);
                                            });
                                        }
                                    });
                            };
                            setGuideHeader(r, i);
                            setDashboardFrame(frameInfoClass);
                        }
                    }
                   utilObject.shelbyHeaderButton.clickRoll();
                   utilObject.shelbyHeaderButton.clickComment();
                   utilObject.shelbyHeaderButton.clickLike();
                   utilObject.shelbyHeaderButton.clickShare();
                }
            },
            shelbyHeaderButton : {
                clickRoll : function() {
                    utilObject.shelbyDocElements['ext-elements'].on('click', ".<%=@prefix%>all-roll", null, function (event) {
                        utilObject.styleGuideShow("<%=@prefix%>roll-guide");
                        var rollItems = utilObject.shelbyDocElements['rollItems'];
                        var rollButton = event.currentTarget;
                        utilObject.shelbyDocElements['rollsList'].off('click', ".<%=@prefix%>roll-selection-item");
                        utilObject.shelbyDocElements['rollsList'].on('click', ".<%=@prefix%>roll-selection-item", {
                            'frameclass': rollButton.getAttribute("data-frameclass"),
                            'videourl': rollButton.getAttribute("data-videourl")
                        }, function (event) {
                            var rollItem = event.currentTarget;
                            var frameMaker = function (response) {
                                    utilObject.htmlTemplate.adjustFrameHeader(response.result, event.data["frameclass"], false);
                                    alert("successfully rolled video");
                                };
                            utilObject.shelbyAjaxCall.shelbyApiRoll(event.data["videourl"], rollItem.getAttribute("data-rollid"), frameMaker);
                        })
                    });
                },
                clickShare : function() {
                    utilObject.shelbyDocElements['ext-elements'].on('click', ".<%=@prefix%>all-share", null, function (event) {
                        utilObject.styleGuideShow("<%=@prefix%>share-guide");
                        var shareButton = event.currentTarget;

                        var shelbyFrameId = shelbyJ("." + shareButton.getAttribute("data-frameclass")).attr("data-shelbyframeid");
                        var shelbyShareSubmit = utilObject.shelbyDocElements['shareSubmit'];
                        if (shelbyFrameId === undefined) {
                            var shelbySubmit = function (response) {
                                    utilObject.htmlTemplate.adjustFrameHeader(response.result, shareButton.getAttribute('data-frameclass'), false);
                                    utilObject.shelbyAjaxCall.shelbyApiShare(response.result.id);
                                }
                            shelbyShareSubmit.on('click', function () {
                                utilObject.shelbyAjaxCall.shelbyApiRoll(shareButton.getAttribute("data-videourl"), utilObject.shelbyBkmkltUser.personal_roll_id, shelbySubmit);
                            });
                        } else {
                            shelbyShareSubmit.on('click', function () {
                                utilObject.shelbyAjaxCall.shelbyApiShare(shelbyFrameId);
                            });
                        }
                    });
                },
                clickComment : function() {
                    utilObject.shelbyDocElements['ext-elements'].on('click', ".<%=@prefix%>all-comment", null, function (event) {
                        var commentButton = event.currentTarget;
                        var commentTextClass = "<%=@prefix%>comment-text-" + commentButton.getAttribute("data-r");
                        var frameHeader = shelbyJ("." + commentButton.getAttribute("data-frameclass"));
                        var conversationId = frameHeader.attr("data-conversationid");
                        if (conversationId !== undefined) {
                            utilObject.htmlTemplate.setUpConversationWithId(conversationId, commentTextClass);
                        }
                        utilObject.styleGuideShow("<%=@prefix%>comment-guide");
                        utilObject.shelbyDocElements['commentSubmit'].off('click');
                        utilObject.shelbyDocElements['commentSubmit'].on('click', function (event) {
                            event.preventDefault();
                            var comment = utilObject.shelbyDocElements['commentText'].val();
                            utilObject.shelbyDocElements['commentText'].val('');
                            if (!comment || comment.length == 0) {
                                return;
                            }
                            var dataReq = {
                                'text': comment
                            };
                            utilObject.shelbyDocElements['commentText'].val('');
                            if (conversationId === undefined) {
                                var undefinedCommentCallback = function (frameInfoClass) {
                                    return function (response) {
                                      utilObject.htmlTemplate.adjustFrameHeader(response.result, frameInfoClass, false, true);
                                      var frame = shelbyJ("." + commentButton.getAttribute("data-frameclass"));
                                      var conversationId = frame.attr("data-conversationid");
                                        utilObject.shelbyAjaxCall.shelbyApiComment(conversationId, dataReq, commentTextClass);
                                    }
                                }
                                utilObject.shelbyAjaxCall.shelbyApiRoll(commentButton.getAttribute("data-videourl"), utilObject.shelbyBkmkltUser.personal_roll_id, undefinedCommentCallback(commentButton.getAttribute("data-frameclass")));
                            } else {
                                utilObject.shelbyAjaxCall.shelbyApiComment(conversationId, dataReq, commentTextClass);
                            }

                        });
                    });
                },
                clickLike : function() {
                    utilObject.shelbyDocElements['ext-elements'].on('click', '.<%=@prefix%>all-like', null, function (event) {
                        var likeButton = event.currentTarget;
                        var likeTextClass = "<%=@prefix%>like-text-" + likeButton.getAttribute("data-r");
                        var shelbyFrameId = shelbyJ("." + likeButton.getAttribute("data-frameclass")).data("shelbyframeid");
                        if (shelbyFrameId === undefined) {
                            var undefinedLikeCallback = function (frameInfoClass) {
                                    return function (response) {
                                        utilObject.htmlTemplate.adjustFrameHeader(response.result, frameInfoClass, false, true);
                                        utilObject.shelbyAjaxCall.shelbyApiLike(response.result.id, shelbyJ(likeButton), likeTextClass);
                                    }
                                }
                            utilObject.shelbyAjaxCall.shelbyApiRoll(likeButton.getAttribute("data-videourl"), utilObject.shelbyBkmkltUser.personal_roll_id, undefinedLikeCallback(likeButton.getAttribute("data-frameclass")))
                        } else {
                            utilObject.shelbyAjaxCall.shelbyApiLike(shelbyFrameId, shelbyJ(likeButton), likeTextClass);
                        }
                    });  
                }
            },
            shelbyAjaxCall : {
                shelbyApiShare: function (apiFrameId) {
                    var destinationstring = [];
                    var networkImgs = utilObject.shelbyDocElements["shareNetworks"];
                    for (var i = 0; i < networkImgs.length; i++) {
                        var networkimg = networkImgs[i];
                        console.log(networkimg);
                        if (networkimg.hasClass('active')) {
                            destinationstring.push(networkimg.data("dest"));
                        }
                    }
                    var dataReq = {
                        'frame_id': apiFrameId,
                        'destination': destinationstring,
                        'text': utilObject.shelbyDocElements['shareText'].val()
                    };
                    shelbyJ.ajax({
                        type: "GET",
                        dataType: "jsonp",
                        data: dataReq,
                        url: "http://<%= Settings::VideoRadar.api_domain %>/v1/POST/frame/" + apiFrameId + "/share",
                        xhrFields: {
                            withCredentials: true
                        },
                        async: true,
                        success: function (response) {
                            var alertString = "Sucessful Share to ";
                            for (var i = 0; i < destinationstring.length - 1; i++) {
                                alertString += destinationstring[i] + ", ";
                            }
                            alertString += destinationstring[i] + ".";
                            alert(alertString);
                        },
                        error: function (xhr, textStatus, errorThrown) {
                            alert("Unable to share video");
                        }

                    });
                },

                shelbyApiComment: function (conversationId, dataReq, conversationTextClass) {
                    shelbyJ.ajax({
                        type: "GET",
                        dataType: "jsonp",
                        data: dataReq,
                        url: "http://<%= Settings::VideoRadar.api_domain %>/v1/POST/conversation/" + conversationId + "/messages",
                        xhrFields: {
                            withCredentials: true
                        },
                        async: true,
                        success: function (response) {
                            utilObject.htmlTemplate.setUpConversationWithId(conversationId, conversationTextClass)
                        },
                        error: function () {
                            alert("Unable to comment");
                        }
                    })
                },

                shelbyApiLike: function (shelbyFrameId, shelbyLikeImg, heartTextId) {
                    shelbyJ.ajax({
                        type: "GET",
                        dataType: "jsonp",
                        xhrFields: {
                            withCredentials: true
                        },
                        async: true,
                        url: "http://<%= Settings::VideoRadar.api_domain %>/v1/POST/frame/" + shelbyFrameId + "/upvote",
                        success: function (response) {
                            shelbyLikeImg.parent().addClass("upvoted");
                            shelbyJ("." + heartTextId).html(response.result.upvoters.length);
                        },
                        error: function () {
                            alert("failure to like");
                        }
                    });


                },


                shelbyApiRoll: function (vid_url, roll_id, callback) {
                    reqData = {
                        'url': vid_url,
                    };

                    shelbyJ.ajax({
                        type: 'GET',
                        url: 'http://<%= Settings::VideoRadar.api_domain %>/v1/POST/roll/' + roll_id + '/frames',
                        dataType: "jsonp",
                        async: true,
                        crossDomain: true,
                        data: reqData,
                        xhrFields: {
                            withCredentials: true
                        },
                        success: function (response) {
                            console.log(response);
                            callback(response)
                        },
                        error: function () {
                            alert("unable to roll video");
                        }
                    });
                },

                shelbyApiNewRoll: function(dataReq, shareEmails) {
                      shelbyJ.ajax({
                          type: 'GET',
                          url: 'http://<%= Settings::VideoRadar.api_domain %>/v1/POST/roll/',
                          dataType: "jsonp",
                          async: true,
                          crossDomain: true,
                          data: dataReq,
                          xhrFields: {
                              withCredentials: true
                          },
                          error: function () {
                              alert("unable to make new roll");
                          },
                          success: function (response) {
  
                              if (shareEmails && shareEmails.length > 0) {
                                  var shareData = {
                                      'roll_id': response.result.id,
                                      'destination': ['email'],
                                      'addresses': shareEmails,
                                      'text': "New Roll"
                                  };
                                  shelbyJ.ajax({
                                      type: 'GET',
                                      data: shareData,
                                      url: 'http://<%= Settings::VideoRadar.api_domain%>/v1/POST/roll/' + response.result.id + '/share',
                                      dataType: "jsonp",
                                      crossDomain: true,
                                      xhrFields: {
                                          withCredentials: true
                                      },
                                      success: function (response) {
                                          alert("email success");
                                      },
                                      error: function () {
                                          alert("unable to share");
                                      }
                                  });
                              }
                              shelbyJ.ajax({
                                  type: 'GET',
                                  url: 'http://<%= Settings::VideoRadar.api_domain %>/v1/user/' + utilObject.shelbyBkmkltUser.id + '/rolls/postable',
                                  dataType: "jsonp",
                                  crossDomain: true,
                                  xhrFields: {
                                      withCredentials: true
                                  },
                                  success: function (response) {
                                      alert("rolled to new roll");
                                      rolls = response.result;
                                      utilObject.htmlTemplate.populateRolls(rolls);
                                  }
                              })
                            }
                      });
                  }
            },
            htmlTemplate : {
                setUpToggle : function() {
                    utilObject.shelbyDocElements['ext-elements'].append('<div id="<%=@prefix%>guide-overlay-controls"><button class="<%=@prefix%>guide-toggle <%=@prefix%>show"> <div class="<%=@prefix%>icon"></div><div class="<%=@prefix%>copy">hide guide</div></button></div>');
                    shelbyJ(".<%=@prefix%>guide-toggle").on("click", function(event) {
                        event.preventDefault();
                        var button = shelbyJ(this);
                        if (button.hasClass("hide")) {
                            utilObject.styleGuideHide();
                        } else {
                            utilObject.styleGuideShow("<%=@prefix%>frame-guide");
                        }
                      });

                          
              },
                messageHtml: function (message) {
                    var stringbuilder = '<div class="<%=@prefix%>frame-conversation-message-avatar">' + '<img src="' + message.user_image_url + '" alt="" title="">' + '</div>' + '<div class="<%=@prefix%>frame-conversation-message-user">' + '<span class="<%=@prefix%>frame-conversation-message-user-name">' + message.realname + '</span>' + '<div class="<%=@prefix%>frame-conversation-message-block">' + message.text + '</div>' + '<span class="<%=@prefix%>frame-conversation-message-timestamp"> Posted ' + (message.origin_network !== undefined && message.origin_network !== null ? 'on ' + message.origin_network : '') + ' ' + message.created_at + '</span>' + '</div>';
                    return stringbuilder;
                },

                setUpConversation: function (messages, commentTextClass) {
                    var stringbuilder = "";
                    if (!messages) {
                        return;
                    }
                    for (var i = 0; i < messages.length; i++) {
                        var message = messages[i];
                        stringbuilder += '<li class="<%=@prefix%>frame-conversation-message clearfix">' + utilObject.htmlTemplate.messageHtml(message) + '</li>';
                    }
                    shelbyJ(".<%=@prefix%>conversation").html(stringbuilder);
                    shelbyJ("." + commentTextClass).html(messages.length);
                },


                setUpConversationWithId: function (conversationId, commentTextClass) {
                    var setHtml = function (response) {
                        utilObject.htmlTemplate.setUpConversation(response.result.messages, commentTextClass);
                    };
                    shelbyJ.ajax({
                        type: 'GET',
                        url: 'http://<%= Settings::VideoRadar.api_domain %>/v1/conversation/' + conversationId,
                        dataType: "jsonp",
                        async: true,
                        crossDomain : true,
                        xhrFields: {
                            withCredentials: true
                        },
                        success: setHtml
                    });
                },


                setUpGuide: function (guideName, styleGuideWidth, loggedIn) {
                    utilObject.shelbyDocElements['ext-elements'].append('<div id=' + guideName + '-window class="' + guideName + ' <%=@prefix%>guide-window">  </div>');

                    // set up clickoff
                    utilObject.shelbyDocElements['ext-elements'].append('<div id=' + guideName + '-clickoff class="' + guideName + ' <%=@prefix%>guide-clickoff"></div>')
                    shelbyJ("#" + guideName + "-clickoff").css("right", shelbyGuideWidth + "px").css("height", shelbyJ(window).height() + "px").css("width", (shelbyJ(window).width() - shelbyGuideWidth) + "px").on('click', function () {
                        utilObject.styleGuideHide();
                        });

                    shelbyJ('#' + guideName + '-window').append('<div id=' + guideName + '-overlay-header class="<%=@prefix%>guide-overlay-header"></div>');
                    shelbyJ('#' + guideName + '-overlay-header').append('<div class="<%=@prefix%>guide-overlay-title"><button class="<%=@prefix%>back ' + guideName + '-button"> </button>' + '<div class="<%=@prefix%>guide-overlay-title-text"> ' + utilObject.allGuides[guideName] + '</div>' + '</div>')
                    shelbyJ(".<%=@prefix%>back").on("click", function(event) {
                        utilObject.styleGuideHide(guideName);
                    });
                    if (loggedIn) {
                        shelbyJ('#' + guideName + '-overlay-header').append('<div class="<%=@prefix%>guide-overlay-context">' + '<div class="<%=@prefix%>guide-overlay-context-overview">' + '<div class="<%=@prefix%>guide-overlay-context-creator"> </div>' + '<div class = "<%=@prefix%>guide-overlay-context-title"></div>' + '</div>' + '</div>');
                    }
                },

                adjustFrameHeader: function (frame, shelbyFrameClass, shouldOverwrite) {

                    if (!shouldOverwrite && shelbyJ("." + shelbyFrameClass).data("shelbyframeid") !== undefined) {
                        return;
                    }

                    if (!frame || !frame.conversation) {
                        return;
                    }
                    var frameHeaders = shelbyJ("." + shelbyFrameClass);
                    for (var i = 0; i < frameHeaders.length; i++) {
                        var frameHeader = shelbyJ(frameHeaders[i]);
                        var displayLogo = frameHeader.hasClass("embedded-header");
                        frameHeader.addClass("frame-exists");
                        var r = frameHeader.attr("data-r")
                        var html = '<img src=' + frame.creator.user_image + ' class="<%=@prefix%>frame-creator-avatar" alt="' + frame.creator.nickname + 's avatar" title="' + frame.creator.nickname + '">' + '<div class=<%=@prefix%>frame-creator-roll> ' + frame.roll.title + '</div>' + '<div class=<%=@prefix%>frame-title>' + frame.video.title + '</div>';
                        if (displayLogo) {
                            html += '<div class="frame-logo"><img class="<%=@prefix%>frame-logo-img"src="http://gt.shelby.tv/images/assets/shelby_logo.png"/> </div></div>';
                        }
                        frameHeader.html(html);
                        frameHeader.attr("data-conversationid", frame.conversation_id);
                        frameHeader.attr("data-shelbyframeid", frame.id);
                        shelbyJ(".like-text-" + r).html(frame.upvoters.length);
                      if (frame.conversation.messages) {
                        shelbyJ(".comment-text-" + r).html(frame.conversation.messages.length);
                      }
                    }
                },

                commentGuideHtml: function () {
                    var user = utilObject.shelbyBkmkltUser;
                    shelbyJ('#<%=@prefix%>comment-guide-window').append('<div class="<%=@prefix%>conversation-scroller">' + '<ul class="<%=@prefix%>conversation <%=@prefix%>frame-conversation"></ul>' + '<form class="<%=@prefix%>new-comment clearfix">' + '<div class="<%=@prefix%>new-comment-user-avatar">' + '<img src="' + user.user_image + '" alt="' + user.nickname + '" title="' + user.nickname + '">' + '</div>' + '<textarea class="<%=@prefix%>new-comment-input" rows="1"></textarea>' + '<div class="<%=@prefix%>frame-comment-error-message"></div>' + '<button class="<%=@prefix%>new-comment-submit"> Comment</button>' + '</form>' + '</div>');
                    utilObject.shelbyDocElements['commentSubmit'] = shelbyJ(".<%=@prefix%>new-comment-submit");
                    utilObject.shelbyDocElements['commentText'] = shelbyJ(".<%=@prefix%>new-comment-input");
                },

                populateRolls: function (rolls) {
                    var rollStringbuilder = '<div class="<%=@prefix%>rolling-main-header">Add to Existing Rolls</div><ul class="<%=@prefix%>list">';

                    for (var i = 0; i < rolls.length; i++) {
                        roll = rolls[i];

                        rollStringbuilder += '<li id="<%=@prefix%>roll-' + roll.id + '" data-rollid = "' + roll.id + '" class="<%=@prefix%>roll-selection-item">' + (roll.public ? '<a href="#" class=rolling-public-roll>' : '<a href="#" class=rolling-private-roll>') + '<div class="<%=@prefix%>roll-selection-item-add clearfix"> Add</div>' + '<div class="<%=@prefix%>roll-selection-item-lining">' + '<img class="<%=@prefix%>roll-selection-item-thumbnail" src="' + roll.thumbnail_url + '">' + '<div class="<%=@prefix%>roll-selection-item-title">' + roll.title + '</div><div class="<%=@prefix%>roll-selection-item-state">' + (roll.public ? "public" : "private") + '</div></div></a></li>';
                    }
                    rollStringbuilder += '</ul>';
                    shelbyJ(".<%=@prefix%>existing-rolls-list").html(rollStringbuilder);
                },

                rollGuideHtml: function (rolls) {
                    shelbyJ("#<%=@prefix%>roll-guide-window").append('<div class="<%=@prefix%>guide-overlay-main <%=@prefix%>rolling-main">' + '<div class="rolling-main-new-roll">' + '<div class="rolling-main-header">Create New Roll</h3></div>' + '<div class="<%=@prefix%>create-roll clearfix">' + '<form class="">' + '<fieldset class="<%=@prefix%>roll-options">' + '<label for="<%=@prefix%>new-roll-name" class="<%=@prefix%>roll-options-label">Roll Name</label>' + '<input name="<%=@prefix%>new-roll-name" id="<%=@prefix%>new-roll-name" class="<%=@prefix%>roll-options-input" plassholder="Roll name..." type="text">' + '<label for="<%=@prefix%>new-roll-recipients" class="<%=@prefix%>roll-options-label">Share With</label>' + '<input name="<%=@prefix%>new-roll-recipients" id="<%=@prefix%>new-roll-recipients" class="<%=@prefix%>roll-options-input" placeholder="Separate email addresses with commas..." type="email" multiple="multiple">' + '</fieldset>' + '<fieldset class="roll-options">' + '<label for="<%=@prefix%>new-roll-status" class="<%=@prefix%>new-roll-status clearfix" data-private="Private" data-public="Public">' + '<input id="<%=@prefix%>new-roll-status" class="<%=@prefix%>new-roll-status-checkbox" type="checkbox">' + '</label>' + '</fieldset>' + '<fieldset class="<%=@prefix%>roll-options">' + '<button onclick="return false;" id="<%=@prefix%>new-roll-create" class="<%=@prefix%>roll-options-submit" type="submit">Roll It</button>' + '</fieldset>' + '</form>' + '</div>' + '</div>' + '<div class="<%=@prefix%>existing-rolls-list"></div>');

                    utilObject.htmlTemplate.populateRolls(rolls);
                    utilObject.shelbyDocElements['rollsList'] = shelbyJ(".<%=@prefix%>existing-rolls-list");

                    shelbyJ(".<%=@prefix%>roll-options-submit").on('click', null, null, function (event) {
                        var shareEmails = shelbyJ("#<%=@prefix%>new-roll-recipients").val();
                        var dataReq = {
                            'title': shelbyJ(".<%=@prefix%>roll-options-input").val(),
                            'collaborative': true,
                            'public': (shelbyJ(".<%=@prefix%>new-roll-status").is(':checked') ? "public" : "private"),
                            'thumbnail_url': utilObject.shelbyBkmkltUser.user_image
                        }
                        shelbyJ(".<%=@prefix%>roll-options-input").val('');
                        shelbyJ("#<%=@prefix%>new-roll-recipients").val('');

                        utilObject.shelbyAjaxCall.shelbyApiNewRoll(dataReq, shareEmails);

                    });
                },

                loginGuideHtml: function () {
                    shelbyJ('#<%=@prefix%>login-guide-window').append('<a class=" <%=@prefix%>gate-networks-twitter" href="http://<%=Settings::VideoRadar.api_domain%>/auth/twitter"> Log in with Twitter </a>' + '<a class=" <%=@prefix%>gate-networks-facebook" href="http://<%=Settings::VideoRadar.api_domain%>/auth/facebook"> Log in with Facebook </a>')
                },


                shareGuideHtml: function (networks) {
                    var contains = function (network_name) {
                            for (var i = 0; i < networks.length; i++) {
                                if (networks[i].provider === network_name) {
                                    return true;
                                }
                            }
                            return false;
                        }

                    shelbyJ('#<%=@prefix%>share-guide-window').append('<div class="<%=@prefix%>frame-sharing">' + '<div class="<%=@prefix%>share-form clearfix">' + '<fieldset class="<%=@prefix%>share-comment">' + '<label for="<%=@prefix%>share-textarea" class="<%=@prefix%>share-label"> Comment </label>' + '<textarea name="<%=@prefix%>share-textarea" id="<%=@prefix%>share-textarea" class="<%=@prefix%>share-textarea" placeholder="Add a message..." rows="2"></textarea>' + '</fieldset>' + '<fieldset class="<%=@prefix%>share-networks"> ' + '<label class="<%=@prefix%>share-label" for="<%=@prefix%>share-networks-list">Share to</label>' + '<ul class="<%=@prefix%>share-networks-list">' + '<li class="' + (contains("twitter") ? 'active ' : '') + '<%=@prefix%>networks-twitter <%=@prefix%>networks-list" data-dest="twitter" ' + (contains("twitter") ? '' : 'hidden') + ">" + '<button onclick="return false;" class="ir <%=@prefix%>networks-twitter-button"> Twitter </button>' + '</li>' + '<li class="' + (contains("facebook") ? 'active ' : '') + '<%=@prefix%>networks-facebook <%=@prefix%>networks-list" data-dest="facebook" ' + (contains("facebook") ? '' : 'hidden') + ">" + '<button onclick="return false;" class="ir <%=@prefix%>networks-facebook-button"> Facebook </button>' + '</li>' + '</ul>' + '</fieldset>' + '<fieldset class="<%=@prefix%>share-submit"> ' + '<button class="<%=@prefix%>share-submit-button" type="submit"> Share it</button>' + '</fieldset>' + '</div></div>');

                    shelbyJ(".<%=@prefix%>networks-twitter").click(function () {
                        shelbyJ(".<%=@prefix%>networks-facebook").toggleClass("active");
                    });
                    shelbyJ(".<%=@prefix%>networks-facebook").click(function () {
                        shelbyJ(".<%=@prefix%>networks-facebook").toggleClass("active");
                    });
                    utilObject.shelbyDocElements['shareSubmit'] = shelbyJ(".<%=@prefix%>share-submit-button");
                    utilObject.shelbyDocElements['shareNetworks'] = [];
                    utilObject.shelbyDocElements['shareNetworks'].push(shelbyJ(".<%=@prefix%>networks-twitter"));
                    utilObject.shelbyDocElements['shareNetworks'].push(shelbyJ(".<%=@prefix%>networks-facebook"));
                    utilObject.shelbyDocElements['shareText'] = shelbyJ(".<%=@prefix%>share-textarea");
                },

                frameGuideHtml: function() { 
                                  shelbyJ("#<%=@prefix%>frame-guide-window").append('<div class="<%=@prefix%>content-body"<div class="<%=@prefix%>guide"><ul class="<%=@prefix%>list <%=@prefix%>dashboard"></ul></div></div>');
                },

                addFrameToGuide: function(footerHtml, r, vidEmbed) {
                      var html = '<li class="<%=@prefix%>frame">' +
                        '<article id="article-"' + r + '" class="<%=@prefix%>video-card">' +
                        '<div class="<%=@prefix%>video-card-header clearfix <%=@prefix%>video-header-' + r + '" data-r=' + r + '></div>';
                      html += '<div id=video-card-' + r + ' class="<%=@prefix%>video-thumbnail" role="img" aria-label></div>';
                      html +='<ul class="<%=@prefix%>frame-controls clearfix found-video-' + r +'" type="toolbar">';
                      html += footerHtml;
                      html += '</ul></article></li>';
                      scrollToFunction = function(vidEmbed) {
                          shelbyJ.scrollTo({"top": vidEmbed.offset().top - 70, "left": vidEmbed.offset().left}, 300);
                      }
                      shelbyJ(".<%=@prefix%>dashboard").append(html);
                      shelbyJ("#video-card-" + r).on('click', function() {
                          scrollToFunction(vidEmbed);
                      });

                },

                frameFooterHtml : function(r) {
                    return '<li class="<%=@prefix%>frame-controls-like toolbar-ele-' + r + '">' + '<button class="aniImg <%=@prefix%>all-like ' + r + '-img <%=@prefix%>button-' + r + '"data-to=tw data-r=' + r + ' type="button">' + '<i class="js-upvote-frame-lining <%=@prefix%>like-text-' + r + '"> &nbsp; </i>' + '</button>' + '</li>' +

                    '<li class="<%=@prefix%>frame-controls-comments toolbar-ele-' + r + '">' + '<button class="aniImg <%=@prefix%>all-comment ' + r + '-img <%=@prefix%>button-' + r + '" data-r=' + r + ' type="button">' + '<i class="comments-frame-lining <%=@prefix%>comment-text-' + r + '"> &nbsp; </i>' + '</button>' + '</li>' +

                    '<li class="<%=@prefix%>frame-controls-roll toolbar-ele-' + r + '">' + '<button class="aniImg <%=@prefix%>all-roll ir ' + r + '-img <%=@prefix%>button-' + r + '" data-r=' + r + ' type="button">' + ' Roll it ' + '</button>' + '</li>' +

                    '<li class="<%=@prefix%>frame-controls-share toolbar-ele-' + r + '">' + '<button class="aniImg <%=@prefix%>all-share ir ' + r + '-img <%=@prefix%>button-' + r + '" data-r=' + r + ' type="button">' + 'Share it ' + '</button>' + '</li>'
                }
                    
        
            },
            styleGuideShow: function (guideName) {
                if (!shelbyJ("#<%=@prefix%>frame-guide-window").hasClass("guide-show")) {
                    shelbyJ(".<%=@prefix%>back").html("Cancel");
                } else {
                  shelbyJ(".<%=@prefix%>back:not(.<%=@prefix%>frame-guide-button)").html("Back");
                }
                shelbyJ(".<%=@prefix%>guide-toggle").removeClass("show").addClass("hide");
                shelbyJ(".<%=@prefix%>guide-window:not(#frame-guide-window)").removeClass("guide-show");
                shelbyJ(".<%=@prefix%>guide-clickoff:not(#frame-guide-clickoff):").removeClass("guide-clickoff-show")
                shelbyJ("#" + guideName + "-window").addClass("guide-show").addClass("guide-animate");
                shelbyJ("#" + guideName + "-clickoff").addClass("guide-clickoff-show");
            },

            // style guide hide will never be called on frame guide
            styleGuideHide: function (guideName) {
                if (!shelbyJ("#<%=@prefix%>frame-guide-window").hasClass("guide-show")) {
                    shelbyJ('.<%=@prefix%>guide-toggle').removeClass("hide").addClass("show");
                }
                if (guideName === undefined) {
                    shelbyJ('.<%=@prefix%>guide-toggle').removeClass("hide").addClass("show");
                    shelbyJ(".<%=@prefix%>guide-window").removeClass("guide-show");
                    shelbyJ('.<%=@prefix%>guide-clickoff').removeClass("guide-clickoff-show");
                } else {
                    shelbyJ('#' + guideName + '-clickoff').removeClass("guide-clickoff-show")
                    shelbyJ("#" + guideName + "-window").removeClass("guide-show");
                }
            },


            allGuides: {
                "<%=@prefix%>roll-guide": "Roll",
                "<%=@prefix%>comment-guide": "Comments",
                "<%=@prefix%>share-guide": "Share",
                "<%=@prefix%>login-guide": "Log In",
                "<%=@prefix%>frame-guide": "Videos on Page"
            },



            foundVideo: null,

            shelbify: function (radar, possibleVideos) {
                utilObject.foundVideo = radar.find(possibleVideos);
                if (utilObject.foundVideo.length > 0) {
                    utilObject.htmlTemplate.setUpGuide("<%=@prefix%>frame-guide", shelbyGuideWidth, false);
                    utilObject.htmlTemplate.setUpGuide("<%=@prefix%>roll-guide", shelbyGuideWidth, true);
                    utilObject.htmlTemplate.setUpGuide("<%=@prefix%>share-guide", shelbyGuideWidth, true);
                    utilObject.htmlTemplate.setUpGuide("<%=@prefix%>comment-guide", shelbyGuideWidth, true);
                    utilObject.htmlTemplate.setUpGuide("<%=@prefix%>login-guide", shelbyGuideWidth, false);
                    utilObject.htmlTemplate.setUpToggle();
                    utilObject.htmlTemplate.frameGuideHtml();
                    utilObject.resizeArray.push(function () {
                        shelbyJ("#" + "<%=@prefix%>guide-clickoff").css("height", shelbyJ(window).height() + "px").css("width", (shelbyJ(window).width() - shelbyGuideWidth) + "px");
                    });
                    utilObject.shelbyUserUtil.signedIn();
                    shelbyJ(window).resize(function () {
                        for (var i = 0; i < utilObject.resizeArray.length; i++) {
                            utilObject.resizeArray[i]();
                        }
                    });
                }

            }
        }

        return utilObject;
    },

shelbyInit: function (opts, useUrl, urlProvider) {
        fullFunc(opts(useUrl, urlProvider));
    },
    shelbyOpts: function (useUrl, urlProvider) {
        return {
            css: ["http://localhost:3000/stylesheets/radar.css"],
            js: ["http://<%= Settings::VideoRadar.web_domain%>/javascripts/jquery-plugins/jquery.scrollTo.js"],
            jqpath: ["http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"],



            ready: function () {
                var shelbyJ = jQuery.noConflict();
                var possibleVideos = {
                    embeds: shelbyJ('embed'),
                    objects: shelbyJ('object'),
                    videos: shelbyJ('video'),
                    iframes: shelbyJ('iframe')
                };

                var shelbyGuideWidth = 330;

                // add in the bookmarklet loading bar
                shelbyJ('.<%=@prefix%>ext-elements').remove()
                shelbyJ('body').append('<div class=<%=@prefix%>ext-elements></div>');
                var radar = shelbyBookmarklet.shelbyRadar(shelbyJ, useUrl, urlProvider);
                shelbyBookmarklet.shelbyUtil(shelbyJ, shelbyGuideWidth).shelbify(radar, possibleVideos);
            }
        }
    }
}
function fullFunc(a){function d(b){if(b.length===0){a.ready();return false}$.getScript(b[0],function(){d(b.slice(1))})}function e(b){$.each(b,function(c,f){$("<link>").attr({href:f,rel:"stylesheet"}).appendTo("head")})}a.jqpath=a.jqpath||"http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js";(function(b){var c=document.createElement("script");c.type="text/javascript";c.src=b;c.onload=function(){e(a.css);d(a.js)};document.body.appendChild(c)})(a.jqpath)}; 

var loadBookmarklet = function(useUrl, useProvider) {
  shelbyBookmarklet.shelbyInit(shelbyBookmarklet.shelbyOpts, useUrl, useProvider);
};

(function(history) {
    var pushState = history.pushState;
    history.pushState = function(state) {
        if (typeof history.onpushstate == "function") {
            history.onpushstate({state: state});
        }
        for (var i = 0; i < shelbyBookmarklet.shelbyProviders.length; i++) {
            var domain_split = shelbyBookmarklet.shelbyProviders[i].domain.split(',');
            var valid_domain = false;
            for (var l = 0; l < domain_split.length; l++) {
                var domain_reg = new RegExp(domain_split[l]);
                if (domain_reg.test(window.location.href)) {
                    valid_domain = true;
                    break;
                }
            }
            if (valid_domain) {
                var providerObj = shelbyBookmarklet.shelbyProviders[i];
                if (providerObj.url_regex) {
                    if (new RegExp(providerObj.url_regex).test(window.location.href)) {
                        loadBookmarklet(true, providerObj.provider);
                        return pushState.apply(history, arguments);
                    }
                }
            }
        }
        shelbyJ('.<%=@prefix%>ext-elements').remove()
        return pushState.apply(history, arguments);
    }
  })(window.history);
loadBookmarklet(false);
