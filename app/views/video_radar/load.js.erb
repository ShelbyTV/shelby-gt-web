window.shelbyBookmarklet = {


    shelbyProviders: [{
        "provider": "blip",
        "domain": "blip.tv",
        "regex": ["flash\\\/stratos\\.swf", "http:\\\/\\\/blip\\.tv\\\/play\\\/"],
        "url_regex": "([0-9]+)"
    }, {
        "provider": "brightcove",
        "domain": "brightcove.com",
        "regex": ["brightcove.com\\\/services\\\/viewer"]
    }, {
        "provider": "collegehumor",
        "domain": "collegehumor.com",
        "regex": ["videoid([0-9]+)", "clip_id=([0-9]+)"],
        "url_regex" : "([0-9]+)"
    }, {
        "provider": "dailymotion",
        "domain": "dailymotion.com",
        "regex": ["videoId%22%3A%22([a-zA-Z0-9]+)", "dailymotion.com%2Fvideo%2F([a-zA-Z0-9]+)_", "dailymotion\\.com\\\/embed\\\/video\\/([a-zA-Z0-9]+)", "dailymotion\\.com\\\/swf\\\/([a-zA-Z0-9]+)", "www.dailymotion.com\\\/video\\\/([a-zA-Z0-9]+)_"]
    },
    /*{ "domain": "hulu.com", "regex": ["http:\\\/\\\/player\\.hulu\\.com\\\/express\\\/.*?"] },*/ {
        "provider": "hulu",
        "domain": "hulu.com",
        "regex": ["\/site-player\/(\\d*)\/player"]
    }, {
        "provider": "pbs",
        "domain": "video.pbs.org",
        "regex": ["width=512&height=288&video=.*?\\\/([0-9]+)"]
    }, {
        "provider": "techcrunch",
        "domain": "techcrunch.tv",
        "regex": ["embedCode=(\\w*)"]
    }, {
        "provider": "ted",
        "domain": "ted.com",
        "regex": ["&amp;su=(http:\\\/\\\/www\\.ted\\.com.*?\\.html)&amp;", "&su=(http:\\\/\\\/www\\.ted\\.com.*?\\.html)&", "vu=http:\\\/\\\/video\\.ted\\.com\\\/.*?&su"]
    }, {
        "provider": "vimeo",
        "domain": "vimeo.com",
        "scrape_url": "http:\\\/\\\/(?:\\w+\\.)*vimeo\\.com\\\/([0-9]+)|http:\\\/\\\/(?:\\w+\\.)*vimeo\\.com.*clip_id=([0-9]+)",
        "regex": ["vimeo\\.com\\\/moogaloop\\.swf\\?clip_id=([0-9]+)", "clip_id=([0-9]+)&server=vimeo\\.com", "clip_id=([0-9]+)", "(player.vimeo.com\\/video\\/)(\\d*)", "(player)(\\d*)"]
    }, {
        "provider": "youtube",
        "domain": "youtube.com",
        "scrape_url": "http:\\\/\\\/(?:\\w+\\.)*youtube\\.com.*v=([\\_\\-a-zA-Z0-9]+)",
        "regex": ["&video_id=([\\_\\-a-zA-Z0-9]+)", "youtube\\.com\/v\/([\\_\\-a-zA-Z0-9]+)", "youtube\\-nocookie\\.com\/v\/([\\_\\-a-zA-Z0-9]+)", "youtube\\.com\/embed\/([\\_\\-a-zA-Z0-9]+)"]
    }, {
        "provider": "bloomberg",
        "domain": "bloomberg.com",
        "regex": ["embedCode=(\\w*)"]
    }, {
      "provider": "espn",
        "domain": "espn.com,espn.go.com",
        "regex": ["espn%3A([0-9]+)&"]
    }],

    shelbyRadar: function (shelbyJ, useUrl, urlProvider) {
        var radar = {

getElementValue: function (obj, id) {
                var value = '';
                for (var i = 0; i < obj.attributes.length; i++) {
                    if (obj.attributes[i].nodeName === id) {
                        value += obj.attributes[i].nodeValue;
                        break;
                    }
                }

                var params = shelbyJ(obj).children('param');
                for (var i = 0; i < params.length; i++) {
                    if (params[i].name == id) {
                        value += params[i].value;
                        break;
                    }
                }
                return value;
            },



            composeKnownUrl : function (domain, video_id) {
                var known_url = "";
                switch (domain) {
                case 'blip.tv':
                    known_url = document.location.href;
                    break;
                case 'youtube.com':
                    known_url = "http://www.youtube.com/watch?v=" + video_id;
                    break;
                case 'dailymotion.com':
                    known_url = "http://www.dailymotion.com/video/" + video_id + "?";
                    break;
                case 'vimeo.com':
                    known_url = "http://vimeo.com/" + video_id;
                    break;
                case 'techcrunch.tv':
                    known_url = "http://techcrunch.tv/watch?id=" + video_id;
                    break;
                case 'collegehumor.com':
                    if (useUrl) {
                        known_url = document.location.href;
                    } else {
                        known_url = "http://collegehumor.com/video/" + video_id;
                    }
                    break;
                case 'hulu.com':
                    //HACK (For now).
                    // the video_id is the content_id, not useful when hitting embedly or our link cache
                    // so using the page location for now
                    known_url = document.location.href;
                    break;
                case 'bloomberg.com':
                    //HACK (For now).
                    // so using the page location for now
                    known_url = document.location.href;
                    break;
                case "espn.com,espn.go.com":
                    known_url = "http://espn.go.com/video/clip?id=" + video_id;
                    break;
                default:
                    known_url = false;
                }
                return known_url;
            },

            find: function (possibleVideos) {
                var videos_to_add = [];
                var found_elements = [];
                for (var i = 0; i < possibleVideos.embeds.length; i++) {
                    found_elements.push(possibleVideos.embeds[i]);
                }
                for (var i = 0; i < possibleVideos.videos.length; i++) {
                    found_elements.push(possibleVideos.videos[i]);
                }
                for (var i = 0; i < possibleVideos.iframes.length; i++) {
                    found_elements.push(possibleVideos.iframes[i]);
                }
                for (var i = 0; i < possibleVideos.objects.length; i++) {
                    if ((/<embed/i.test(possibleVideos.objects[i].innerHTML) || possibleVideos.embeds.length == 0) && (/<object/i.test(possibleVideos.objects[i].innerHTML))) {
                        found_elements.push(possibleVideos.objects[i]);
                    } else if (/vimeo\.com/i.test(possibleVideos.objects[i].innerHTML)) {
                        found_elements.push(possibleVideos.objects[i]);
                    } else if ((/<oolaya/i.test(possibleVideos.objects[i].innerHTML) || possibleVideos.embeds.length == 0) && (/<object/i.test(possibleVideos.objects[i].innerHTML))) {

                        found_elements.push(possibleVideos.objects[i]);
                    } else if ((/ooyala/i.test(possibleVideos.objects[i].className))) {
                        found_elements.push(possibleVideos.objects[i]);
                    }
                    
                }
                for (var i = 0; i < found_elements.length; i++) {
                    if (this.getElementValue(found_elements[i], 'data-youtube-id')) {
                        var obj = shelbyJ(found_elements[i]);
                        videos_to_add.push({
                            embed: obj,
                            domain: "youtube.com",
                            video_id: this.getElementValue(found_elements[i], 'data-youtube-id')
                        });
                    } else {
                        var str = this.getElementValue(found_elements[i], 'flashvars') + '&amp;' + this.getElementValue(found_elements[i], 'src') + this.getElementValue(found_elements[i], 'data') + this.getElementValue(found_elements[i], 'name') + found_elements[i].innerHTML + found_elements[i].id;
                        for (var j = 0; j < shelbyBookmarklet.shelbyProviders.length; j++) {
                            if (useUrl && shelbyBookmarklet.shelbyProviders[j].provider !== urlProvider) { 
                                continue;
                            }
                            for (var k = 0; k < shelbyBookmarklet.shelbyProviders[j].regex.length; k++) {
                                var reg = new RegExp(shelbyBookmarklet.shelbyProviders[j].regex[k]);
                                var domain_split = shelbyBookmarklet.shelbyProviders[j].domain.split(',');
                                var valid_domain = false;
                                for (var l = 0; l < domain_split.length; l++) {
                                  var domain_reg = new RegExp(shelbyJ.trim(domain_split[l]));
                                    if (domain_reg.test(str) || domain_reg.test(window.location)) {
                                        valid_domain = true;
                                        break;
                                    }
                                }
                                if (reg.test(str) && valid_domain) {
                                    var match = reg.exec(str);
                                    var obj = shelbyJ(found_elements[i]);
                                    if (obj.width() == 0) {
                                        obj = obj.parent();
                                    }
                                    if (match[2] == undefined) {
                                        if (match[1] == undefined) {
                                            match[1] = window.location.href;
                                        } else {
                                            match[2] = match[1];
                                        }
                                    }
                                    var provider = shelbyBookmarklet.shelbyProviders[j].provider;
                                    var video_id = match[2];
                                    if (useUrl) {
                                      var match = new RegExp(shelbyBookmarklet.shelbyProviders[j].url_regex).exec(window.location.href);
                                      video_id = match[1];
                                    }
                                    videos_to_add.push({
                                        embed: obj,
                                        domain: shelbyBookmarklet.shelbyProviders[j].domain,
                                        video_id: video_id,
                                        provider: provider,
                                        known_url: this.composeKnownUrl(shelbyBookmarklet.shelbyProviders[j].domain, match[2])
                                    });
                                    break;
                                }
                            }
                        }
                    }
                }
                return videos_to_add;
            }
        };
        return radar;
    },
    shelbyUtil: function (shelbyJ, shelbyGuideWidth, toEmbedButtons) {

        var BackboneModel = function(props) {
          this.props = props;
        }

        BackboneModel.prototype = {
            get : function(prop) {
                return this.props[prop];
            },
            set : function(prop, val) {
                this.props[prop] = val;
            },
            toJSON: function() {
                return this.props;
            },
            getText : function() {
                return this.props.text;
            }

        }
              
        var utilObject = {
            shelbyCreateModel : function(properties) {
                return new BackboneModel(properties);
            },

            shelbyDocElements: {
                'ext-elements': shelbyJ(".<%=@prefix%>ext-elements")
            },

            shelbyBkmkltUser: null,
            shelbyUserUtil : {
                shelbySignedInCallback: function (response) {
                    if (response.result.signed_in === false) {
                        utilObject.styleGuideShow("<%=@prefix%>login-guide");
                        utilObject.htmlTemplate.loginGuideHtml();
                    } else {
                        utilObject.shelbyUserUtil.getUser();
                    }
                },
                shelbyUserCallback: function (response) {
                    utilObject.shelbyBkmkltUser = response.result;
                    var authentications = response.result.authentications;
                    shelbyJ.ajax({
                        type: 'GET',
                        url: 'http://<%= Settings::VideoRadar.api_domain %>/v1/roll/' + utilObject.shelbyBkmkltUser.personal_roll_id,
                        dataType: "jsonp",
                        crossDomain: true,
                        xhrFields: {
                            withCredentials: true
                        },
                        success: function (response) {
                            roll = response.result;
                            utilObject.shelbyBkmkltUser.personalRoll = roll;
                            utilObject.sendVidsToShelby(utilObject.foundVideo, toEmbedButtons);
                        }
                    });

                },
                signedIn: function () {
                    shelbyJ.ajax({
                        type: 'GET',
                        url: 'http://<%= Settings::VideoRadar.api_domain %>/v1/signed_in',
                        dataType: "jsonp",
                        crossDomain: true,
                        xhrFields: {
                            withCredential: true
                        },
                        success: utilObject.shelbyUserUtil.shelbySignedInCallback
                    });
                },
                getUser: function () {
                    shelbyJ.ajax({
                        type: 'GET',
                        url: 'http://<%= Settings::VideoRadar.api_domain %>/v1/user',
                        dataType: "jsonp",
                        crossDomain: true,
                        xhrFields: {
                            withCredentials: true
                        },
                        success: utilObject.shelbyUserUtil.shelbyUserCallback
                    });
                }
            },             
            // in case we need special heights/wdiths for certain websites       
            getHeight: function (jqueryVid) {
                return jqueryVid.height();
            },

            getWidth: function (jqueryVid) {
                return jqueryVid.width();
            },

            getContextVpos: function(vidTop) {
                return vidTop + 100;
            },
            
            getContextHpos: function(vidLeft, contextWidth) {
                return vidLeft - contextWidth;
            }, 
            getFooterVpos: function(vidTop) {
                return vidTop + 30;
            },
            getFooterHpos: function(vidLeft, footerWidth) {
                return vidLeft - footerWidth;
            },
  


            resizeFunction: function (vids, vidIndex, r) {
                var vid = vids[vidIndex];
                var footerWidth = shelbyJ('#<%=@prefix%>control-on-page-' + r).width();
                var contextWidth = shelbyJ('#<%=@prefix%>context-on-page-' + r).width();
                shelbyJ('#<%=@prefix%>control-on-page-' + r).css("left", utilObject.getFooterHpos(vid.embed.offset().left, footerWidth)).css("top", utilObject.getFooterVpos(vid.embed.offset().top));
                shelbyJ('#<%=@prefix%>context-on-page-' + r).css("left", utilObject.getContextHpos(vid.embed.offset().left, contextWidth)).css("top", utilObject.getContextVpos(vid.embed.offset().top));
            },

            resizeArray: [],
            videoInformation: {},

            sendVidsToShelby: function (foundVids, toEmbedButtons) {
                var vids = [];
                for (var i = 0; i < foundVids.length; i++) {
                    if (foundVids[i].known_url !== false) {
                        vids.push(foundVids[i]);
                    }
                }
                var self = this;
  
                if (vids.length > 0) {
                    for (var i = 0; i < vids.length; i++) {
                        var r = vids[i].video_id;
                        utilObject.videoInformation[r] = {video: null, frame: null};
                        var height = utilObject.getHeight(vids[i].embed);
                        var width = utilObject.getWidth(vids[i].embed);
                        if (height < 100 || width < 100) {
                            continue;
                        }
                        var vpos = vids[i].embed.offset().top;
                        var hpos = vids[i].embed.offset().left;
                        var frameInfoClass = "<%=@prefix%>video-context-" + r;

                        // put buttons/headers here, we have hpos, vpos, fixed positions

                        if (toEmbedButtons) {
                            utilObject.shelbyDocElements['ext-elements'].append(JST['bookmarklet-context']({videoId : r}));
                            utilObject.shelbyDocElements['ext-elements'].append(utilObject.htmlTemplate.frameRollersHtml(r));
                            utilObject.resizeFunction(vids, i, r);
                            var resizeFunction = function(vidIndex, r) {
                                return function () {
                                    utilObject.resizeFunction(vids, vidIndex, r);
                                }
                            }(i, r);
                            shelbyJ("body").on('webkitTransitionEnd transitionend msTransitionEnd oTransitionEnd', function (event) {
                                resizeFunction();
                            });
                            utilObject.resizeArray.push(resizeFunction);
                        }

                        shelbyJ(".<%=@prefix%>button-" + r).attr("data-frameclass", frameInfoClass).attr("data-videourl", vids[i].known_url);
                        var dataReq = {
                            'provider_name': vids[i].provider,
                            'provider_id': vids[i].video_id,
                            'url': vids[i].known_url
                        };
                        
                        var setDashboardFrame = function (frameInfoClass, r) {
                                shelbyJ.ajax({
                                    type: "GET",
                                    url: "http://<%= Settings::VideoRadar.api_domain %>/v1/dashboard/find_entries_with_video",
                                    dataType: "jsonp",
                                    data: dataReq,
                                    crossDomain:true,
                                    async: true,
                                    xhrFields: {
                                        withCredentials: true
                                    },
                                    success: function (response) {
                                        var frames = response.result;
                                        utilObject.videoInformation[r].frame = response.result[0];
                                        utilObject.htmlTemplate.adjustFrameContext(frameInfoClass, true);
                                    }
                              });
                        };
                     
                        var setGuideContext = function (r, i) {
                              var imgClassName = r + "-img";
                                shelbyJ.ajax({
                                    type: "GET",
                                    url: "http://<%= Settings::VideoRadar.api_domain %>/v1/video/find_or_create",
                                    dataType: "jsonp",
                                    data: dataReq,
                                    async: true,
                                    xhrFields: {
                                        withCredentials: true
                                    },
                                    crossDomain : true,
                                    success: function (response) {
                                      utilObject.videoInformation[r].video = response.result;
                                    }
                                });
                        };
                        setGuideContext(r, i);
                        setDashboardFrame(frameInfoClass, r);
                    }
                  utilObject.shelbyContextButton.clickRoll();
                  utilObject.shelbyContextButton.clickQueue();
                   utilObject.shelbyContextButton.clickComment();
                }
            },
            shelbyContextButton : {
                clickQueue : function() {
                        utilObject.shelbyDocElements['ext-elements'].on('click', ".<%=@prefix%>all-queue", null, function (event) {
                        var queueButton = event.currentTarget;
                        utilObject.shelbyAjaxCall.shelbyApiRoll(queueButton.getAttribute("data-videourl"), utilObject.shelbyBkmkltUser.watch_later_roll_id, function(response) {alert("roll success")});
                    });
                },
                      
                clickRoll : function() {
                        utilObject.shelbyDocElements['ext-elements'].on('click', ".<%=@prefix%>all-roll", null, function (event) {
                          utilObject.styleGuideShow("<%=@prefix%>roll-guide");
                          var rollButton = event.currentTarget;
                          var r = rollButton.getAttribute("data-r");
                          var user = utilObject.shelbyBkmkltUser;
                          var frameInfo = utilObject.videoInformation[r].frame; 
                          var videoInfo = utilObject.videoInformation[r].video;
                          if (frameInfo) {
                              var creator = utilObject.shelbyCreateModel(frameInfo.creator);
                              var messageFirst = frameInfo.conversation.messages[0];
                              var messages = {
                                first: function() { 
                                    return utilObject.shelbyCreateModel({text: messageFirst.text})
                                },
                                length: frameInfo.conversation.messages.length
                              };
                              var conversation = utilObject.shelbyCreateModel({"messages": messages});
                          } else {
                            var creator = utilObject.shelbyCreateModel({nickname: user.nickname});
                            var conversation = utilObject.shelbyCreateModel({messages: []});
                          }
                          var frameClass = rollButton.getAttribute("data-shelbeframeid");
                          var backboneFrame = utilObject.shelbyCreateModel({'creator' : creator});
                          backboneFrame.set('video', utilObject.shelbyCreateModel(videoInfo));
                          backboneFrame.set('conversation', conversation);
                          shelbyJ("#roll-guide-window").html(JST['frame-rolling']({frame: backboneFrame, user: utilObject.shelbyCreateModel(user)}));
                          utilObject.htmlTemplate.rollingFormHtml(user.personalRoll, backboneFrame);
                          utilObject.handleRollSubmit(rollButton.getAttribute("data-videourl"), frameClass, r);
                          shelbyJ(".<%=@prefix%>cancel").on("click", function(event) {
                              utilObject.styleGuideHide("roll-guide");
                          });
                          shelbyJ(".<%=@prefix%>back").on("click", function(event) {
                              utilObject.styleGuideHide("roll-guide");
                          });
                    });
                },
                // if it is commentable there must be a frame associated with it
                clickComment : function() {
                    utilObject.shelbyDocElements['ext-elements'].on('click', ".<%=@prefix%>all-comment", null, function (event) {
                        var commentButton = event.currentTarget;
                        var videoId = commentButton.getAttribute("data-r");
                        var frameInfo = utilObject.videoInformation[videoId].frame;
                        console.log(frameInfo);
                        var conversationId = frameInfo.conversation_id;
                        var backboneFrame = utilObject.shelbyCreateModel({});
                        backboneFrame.set("conversation", utilObject.shelbyCreateModel(frameInfo.conversation));
                        backboneFrame.set("creator", utilObject.shelbyCreateModel(frameInfo.creator));
                        backboneFrame.set("video", utilObject.shelbyCreateModel(frameInfo.video));
                        var commentHtml = JST["frame-conversation"]({frame: backboneFrame, user: utilObject.shelbyCreateModel(utilObject.shelbyBkmkltUser)});
                        shelbyJ("#comment-guide-window").html(commentHtml);
                        utilObject.shelbyDocElements['commentSubmit'] = shelbyJ(".<%=@prefix%>new-comment-submit");
                        utilObject.shelbyDocElements['commentText'] = shelbyJ(".<%=@prefix%>new-comment-input");
                        utilObject.htmlTemplate.setUpConversationWithId(conversationId, videoId);
                        utilObject.styleGuideShow("<%=@prefix%>comment-guide");
                        utilObject.shelbyDocElements['commentSubmit'].off('click');
                        utilObject.shelbyDocElements['commentSubmit'].on('click', function (event) {
                            event.preventDefault();
                            var comment = utilObject.shelbyDocElements['commentText'].val();
                            utilObject.shelbyDocElements['commentText'].val('');
                            if (!comment || comment.length == 0) {
                                return;
                            }
                            var dataReq = {
                                'text': comment
                            };
                            utilObject.shelbyAjaxCall.shelbyApiComment(conversationId, dataReq, videoId);
                        });
                    });
                },
            },
            shelbyAjaxCall : {
                shelbyApiShare: function (apiFrameId) {
                    var destinationstring = [];
                    var networkImgs = utilObject.shelbyDocElements["shareNetworks"];
                    for (var i = 0; i < networkImgs.length; i++) {
                        var networkimg = networkImgs[i];
                        if (networkimg.hasClass('active')) {
                            destinationstring.push(networkimg.data("dest"));
                        }
                    }
                    var dataReq = {
                        'frame_id': apiFrameId,
                        'destination': destinationstring,
                        'text': utilObject.shelbyDocElements['shareText'].val()
                    };
                    var shareCompleteCb = utilObject.displaySpinnerOnButton(utilObject.shelbyDocElements['shareSubmit']);
                    shelbyJ.ajax({
                        type: "GET",
                        dataType: "jsonp",
                        timeout: 10000,
                        data: dataReq,
                        url: "http://<%= Settings::VideoRadar.api_domain %>/v1/POST/frame/" + apiFrameId + "/share",
                        xhrFields: {
                            withCredentials: true
                        },
                        async: true,
                        success: function (response) {
                            var alertString = "Sucessful Share to ";
                            for (var i = 0; i < destinationstring.length - 1; i++) {
                                alertString += destinationstring[i] + ", ";
                            }
                            alertString += destinationstring[i] + ".";
                        },
                        error: function (xhr, textStatus, errorThrown) {
                            alert("Unable to share video");
                        },
                        complete: function() {
                            shareCompleteCb();
                        }
                    });
                },
                shelbyApiConversation: function(conversationId, conversationCB) {
                    if (!conversationId) {
                        conversationCB();
                    } else {
                      shelbyJ.ajax({
                          type: "GET",
                          dataType: "jsonp",
                          data: {},
                          url: "http://<%=Settings::VideoRadar.api_domain%>/v1/conversation/" + conversationId,
                          xhrFields: {
                            withCredentials: true
                          },
                          async: true,
                          success: conversationCB,
                      });
                    }
                },


                shelbyApiComment: function (conversationId, dataReq, videoId) {
                    shelbyJ.ajax({
                        type: "GET",
                        dataType: "jsonp",
                        data: dataReq,
                        url: "http://<%= Settings::VideoRadar.api_domain %>/v1/POST/conversation/" + conversationId + "/messages",
                        xhrFields: {
                            withCredentials: true
                        },
                        async: true,
                        success: function (response) {
                            utilObject.htmlTemplate.setUpConversationWithId(conversationId, videoId)
                        },
                        error: function () {
                            alert("Unable to comment");
                        }
                    })
                },


                shelbyApiRoll: function (vid_url, roll_id, callback) {
                    reqData = {
                        'url': vid_url,
                    };
                    
                    shelbyJ.ajax({
                        type: 'GET',
                        url: 'http://<%= Settings::VideoRadar.api_domain %>/v1/POST/roll/' + roll_id + '/frames',
                        dataType: "jsonp",
                        async: true,
                        crossDomain: true,
                        data: reqData,
                        xhrFields: {
                            withCredentials: true
                        },
                        success: function (response) {
                            callback(response)
                        },
                        error: function () {
                            alert("unable to roll video");
                        }
                    });
                },

            },

            handleRollSubmit : function (knownUrl, frameInfoClass, r) {
              var submitButton = shelbyJ(".<%=@prefix%>roll-options-submit");
              submitButton.off('click');
              submitButton.on('click', null, null, function (event) {
                var shareEmails = shelbyJ("#<%=@prefix%>new-roll-recipients").val();
                var dataReq = {
                    'title': shelbyJ(".<%=@prefix%>roll-options-input").val(),
                    'collaborative': true,
                    'public': (shelbyJ(".<%=@prefix%>new-roll-status").is(':checked') ? "public" : "private"),
                    'thumbnail_url': utilObject.shelbyBkmkltUser.user_image
                }
                shelbyJ(".<%=@prefix%>roll-options-input").val('');
                shelbyJ("#<%=@prefix%>new-roll-recipients").val('');
                rollCallback = function(response) {
                  alert("successfully rolled");
                  if (!utilObject.videoInformation[r].frame) {
                    utilObject.videoInformation[r].frame = response.result;
                  }
                  utilObject.htmlTemplate.adjustFrameContext(frameInfoClass, false);
                }
                utilObject.shelbyAjaxCall.shelbyApiRoll(knownUrl, utilObject.shelbyBkmkltUser.personal_roll_id, rollCallback);

                });
            },

            htmlTemplate : {
                setUpToggle : function() {
                    utilObject.shelbyDocElements['ext-elements'].append('<div id="<%=@prefix%>guide-overlay-controls"><button class="<%=@prefix%>guide-toggle <%=@prefix%>show"> <div class="<%=@prefix%>icon"></div><div class="<%=@prefix%>copy">hide guide</div></button></div>');
                    shelbyJ(".<%=@prefix%>guide-toggle").on("click", function(event) {
                        event.preventDefault();
                        var button = shelbyJ(this);
                        if (button.hasClass("hide")) {
                            utilObject.styleGuideHide();
                        } else {
                            utilObject.styleGuideShow("<%=@prefix%>frame-guide");
                        }
                      });

                          
              },
                messageHtml: function (message) {
                    return JST['message']({message: utilObject.shelbyCreateModel(message), user: utilObject.shelbyCreateModel(utilObject.shelbyBkmkltUser)});
                },

                setUpConversation: function (messages, commentTextClass) {
                    var stringbuilder = "";
                    if (!messages) {
                        return;
                    }
                    for (var i = 0; i < messages.length; i++) {
                        var message = messages[i];
                        stringbuilder += '<li class="<%=@prefix%>frame-conversation-message clearfix">' + utilObject.htmlTemplate.messageHtml(message) + '</li>';
                    }
                    shelbyJ(".<%=@prefix%>conversation").html(stringbuilder);
                    shelbyJ("." + commentTextClass).html(messages.length);
                },


                setUpConversationWithId: function (conversationId, videoId) {
                    var commentTextClass = "comment-text-" + videoId;
                    var conversationCallback = function (response) {
                      console.log(videoId);
                        console.log(utilObject.videoInformation);
                        var frame = utilObject.videoInformation[videoId].frame;
                        if (frame) {
                          frame.conversation = response.result;
                        }
                        utilObject.htmlTemplate.setUpConversation(response.result.messages, commentTextClass);
                    };
                    shelbyJ.ajax({
                        type: 'GET',
                        url: 'http://<%= Settings::VideoRadar.api_domain %>/v1/conversation/' + conversationId,
                        dataType: "jsonp",
                        async: true,
                        crossDomain : true,
                        xhrFields: {
                            withCredentials: true
                        },
                        success: conversationCallback
                    });
                },


                setUpGuide: function (guideName, styleGuideWidth, loggedIn) {
                    utilObject.shelbyDocElements['ext-elements'].append('<div id=' + guideName + '-window class="' + guideName + ' <%=@prefix%>guide-window">  </div>');

                    // set up clickoff
                    utilObject.shelbyDocElements['ext-elements'].append('<div id=' + guideName + '-clickoff class="' + guideName + ' <%=@prefix%>guide-clickoff"></div>')
                    shelbyJ("#" + guideName + "-clickoff").css("right", shelbyGuideWidth + "px").css("height", shelbyJ(window).height() + "px").css("width", (shelbyJ(window).width() - shelbyGuideWidth) + "px").on('click', function () {
                        utilObject.styleGuideHide();
                        });

                },
  
                adjustFrameContext: function (shelbyFrameClass, shouldOverwrite) {
                    var frameContext = shelbyJ("." + shelbyFrameClass);
                    var r = frameContext.attr("data-r");
                    var frame = utilObject.videoInformation[r].frame;
                    if (!shouldOverwrite && shelbyJ("." + shelbyFrameClass).data("shelbyframeid") !== undefined) {
                        return;
                    }
                    if (!frame || !frame.conversation) {
                        return;
                    }
                    frameContext.removeClass("off");
                    var displayLogo = frameContext.hasClass("embedded-header");
                    frameContext.addClass("frame-exists");
                    var r = frameContext.attr("data-r")
                    var frameContextContent = JST['bookmarklet-context-content']({frame: frame, videoId: r});
                    shelbyJ(".frame-context-image-" + r).html(frameContextContent);
                    frameContext.attr("data-conversationid", frame.conversation_id);
                    frameContext.attr("data-shelbyframeid", frame.id);
                    frameContext.attr("data-nickname", frame.creator.nickname);
                    if (frame.conversation.messages) {
                      shelbyJ(".comment-text-" + r).html(frame.conversation.messages.length);
                    }
                },

                rollingFormHtml: function (personalRoll, backboneFrame) {
                        var backboneRoll = utilObject.shelbyCreateModel(personalRoll);    
                        var backboneUser = utilObject.shelbyCreateModel(utilObject.shelbyBkmkltUser);
                        var templateObj = {
                          roll: backboneRoll,
                          frame: backboneFrame,
                          user: backboneUser,
                          rollOptions: {
                                pathForDisplay: backboneRoll.get("title"),
                                titleWithoutPath: "Personal Roll",
                                urlForRoll: backboneRoll.subdomain + ".shelby.tv"
                          }
                        }
                        shelbyJ(".rolling-form").append(JST['rolling-form'](templateObj));
                },
                loginGuideHtml: function () {
                  shelbyJ('#<%=@prefix%>login-guide-window').html(JST['bookmarklet-login']({
                      twitterDomain: "http://<%=Settings::VideoRadar.api_domain%>/auth/twitter",
                      facebookDomain: "http://<%=Settings::VideoRadar.api_domain%>/auth/facebook",
                  }));
                },

                frameGuideHtml: function() { 
                                  shelbyJ("#<%=@prefix%>frame-guide-window").append('<div class="<%=@prefix%>content-body"<div class="<%=@prefix%>guide"><ul class="<%=@prefix%>list <%=@prefix%>dashboard"></ul></div></div>');
                },

                addFrameToGuide: function(rollersHtml, r, vidEmbed) {
                      var html = '<li class="<%=@prefix%>frame">' +
                        '<article id="article-"' + r + '" class="<%=@prefix%>video-card">' +
                        '<div class="<%=@prefix%>video-card-header clearfix <%=@prefix%>video-context-' + r + '" data-r=' + r + '></div>';
                      html += '<div id=video-card-' + r + ' class="<%=@prefix%>video-thumbnail" role="img" aria-label></div>';
                      html +='<ul class="<%=@prefix%>frame-controls clearfix found-video-' + r +'" type="toolbar">';
                      html += rollersHtml;
                      html += '</ul></article></li>';
                      scrollToFunction = function(vidEmbed) {
                          shelbyJ.scrollTo({"top": vidEmbed.offset().top - 70, "left": vidEmbed.offset().left}, 300);
                      }
                      shelbyJ(".dashboard").append(html);
                      shelbyJ("#video-card-" + r).on('click', function() {
                          scrollToFunction(vidEmbed);
                      });

                },

                frameRollersHtml : function(r) {
                    return JST['bookmarklet-buttons']({videoId: r});      
                }
            },
            styleGuideShow: function(guideName) {
                if (!shelbyJ("#<%=@prefix%>frame-guide-window").hasClass("guide-show")) {
                    shelbyJ(".<%=@prefix%>back").html("Cancel");
                } else {
                  shelbyJ(".<%=@prefix%>back:not(.<%=@prefix%>frame-guide-button)").html("Back");
                }
                shelbyJ(".<%=@prefix%>guide-toggle").removeClass("show").addClass("hide");
                shelbyJ(".<%=@prefix%>guide-window:not(#frame-guide-window)").removeClass("guide-show");
                shelbyJ(".<%=@prefix%>guide-clickoff:not(#frame-guide-clickoff):").removeClass("guide-clickoff-show")
                shelbyJ("#" + guideName + "-window").addClass("guide-show").addClass("guide-animate");
                shelbyJ("#" + guideName + "-clickoff").addClass("guide-clickoff-show");
            },

            // style guide hide will never be called on frame guide
            styleGuideHide: function (guideName) {
                if (!shelbyJ("#<%=@prefix%>frame-guide-window").hasClass("guide-show")) {
                    shelbyJ('.<%=@prefix%>guide-toggle').removeClass("hide").addClass("show");
                }
                if (guideName === undefined) {
                    shelbyJ('.<%=@prefix%>guide-toggle').removeClass("hide").addClass("show");
                    shelbyJ(".<%=@prefix%>guide-window").removeClass("guide-show");
                    shelbyJ('.<%=@prefix%>guide-clickoff').removeClass("guide-clickoff-show");
                } else {
                    shelbyJ('#' + guideName + '-clickoff').removeClass("guide-clickoff-show")
                    shelbyJ("#" + guideName + "-window").removeClass("guide-show");
                }
            },

            displaySpinnerOnButton: function (jQueryButton) {
                jQueryButton.addClass("<%=@prefix%>js_sharing");
                var content = jQueryButton.html();
                jQueryButton.html('<img src="http://<%= Settings::VideoRadar.web_domain%>/images/assets/loading-small.gif"/>');
                return function () {
                  jQueryButton.html(content);
                  jQueryButton.removeClass("<%=@prefix%>js_sharing");
                }
            },

            allGuides: {
                "<%=@prefix%>roll-guide": "Roll",
                "<%=@prefix%>comment-guide": "Comments",
                "<%=@prefix%>share-guide": "Share",
                "<%=@prefix%>login-guide": "Log In",
                "<%=@prefix%>frame-guide": "Videos on Page"
            },



            foundVideo: null,

            shelbify: function (radar, possibleVideos) {
                utilObject.foundVideo = radar.find(possibleVideos);
                if (utilObject.foundVideo.length > 0) {
                    window.libs = {shelbyGT: {RollModel: {}}};
                    window.libs.shelbyGT.RollModel.TYPES = {
                          // special rolls that have not yet been updated to their specific type default to :special_roll
                          special_roll : 10,
                          special_public : 11,
                          special_hearted : 12,
                          special_watch_later : 13,
                          // special rolls are < all_special_rolls (convenience)
                          all_special_rolls: 14,

                          // User-created non-collaborative public rolls (previously these were collaborative, we're changing that)
                          user_public : 30,
                          // Company-created collaborative public rolls
                          global_public : 31,
                          // User-created collaborative private rolls
                          user_private : 50,

                          genius : 70
                    };

                    utilObject.htmlTemplate.setUpGuide("<%=@prefix%>frame-guide", shelbyGuideWidth, false);
                    utilObject.htmlTemplate.setUpGuide("<%=@prefix%>roll-guide", shelbyGuideWidth, true);
                    utilObject.htmlTemplate.setUpGuide("<%=@prefix%>comment-guide", shelbyGuideWidth, true);
                    utilObject.htmlTemplate.setUpGuide("<%=@prefix%>login-guide", shelbyGuideWidth, false);
                    utilObject.htmlTemplate.setUpToggle();
                    utilObject.htmlTemplate.frameGuideHtml();
                    utilObject.resizeArray.push(function () {
                        shelbyJ("#" + "<%=@prefix%>guide-clickoff").css("height", shelbyJ(window).height() + "px").css("width", (shelbyJ(window).width() - shelbyGuideWidth) + "px");
                    });
                    utilObject.shelbyUserUtil.signedIn();
                    shelbyJ(window).resize(function () {
                        for (var i = 0; i < utilObject.resizeArray.length; i++) {
                            utilObject.resizeArray[i]();
                        }
                    });
                }
            }
        }
        return utilObject;
    },

    shelbyInit: function (opts, useUrl, urlProvider) {
        fullFunc(opts(useUrl, urlProvider));
    },
    shelbyOpts: function (useUrl, urlProvider) {
        return {
            css: ["http://localhost:3000/assets/radar.css"],
                 js: [
                  "http://<%= Settings::VideoRadar.web_domain%>/assets/jquery-plugins/jquery.scrollTo.js", 
                 "http://<%= Settings::VideoRadar.web_domain%>/assets/backbone/underscore.js",
                 "http://<%=Settings::VideoRadar.web_domain%>/assets/rolling-form.jst",
                 "http://<%=Settings::VideoRadar.web_domain%>/assets/bookmarklet-buttons.jst",
                 "http://<%=Settings::VideoRadar.web_domain%>/assets/bookmarklet-context.jst",
                 "http://<%=Settings::VideoRadar.web_domain%>/assets/bookmarklet-context-content.jst",
                 "http://<%=Settings::VideoRadar.web_domain%>/assets/frame-conversation-form.jst",
                 "http://<%=Settings::VideoRadar.web_domain%>/assets/message.jst",
                 "http://<%=Settings::VideoRadar.web_domain%>/assets/frame-rolling.jst",
                 "http://<%=Settings::VideoRadar.web_domain%>/assets/frame-conversation.jst",
                 "http://<%=Settings::VideoRadar.web_domain%>/assets/bookmarklet-login.jst",
                 "http://<%=Settings::VideoRadar.web_domain%>/assets/wide-thumbnail-overlay.jst"
                   ],
            jqpath: ["http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"],

            ready: function () {
                var shelbyJ = jQuery.noConflict();
                var possibleVideos = {
                    embeds: shelbyJ('embed'),
                    objects: shelbyJ('object'),
                    videos: shelbyJ('video'),
                    iframes: shelbyJ('iframe')
                };

                var shelbyGuideWidth = 330;

                // add in the bookmarklet loading bar
                shelbyJ('.<%=@prefix%>ext-elements').remove()
                shelbyJ('body').append('<div class=<%=@prefix%>ext-elements></div>');
                var radar = shelbyBookmarklet.shelbyRadar(shelbyJ, useUrl, urlProvider);
                shelbyBookmarklet.shelbyUtil(shelbyJ, shelbyGuideWidth, <%=@use_case=="bookmarklet"%>).shelbify(radar, possibleVideos);
            }
        }
    }
}

function fullFunc(a){function d(b){if(b.length===0){a.ready();return false}$.getScript(b[0],function(){d(b.slice(1))})}function e(b){$.each(b,function(c,f){$("<link>").attr({href:f,rel:"stylesheet"}).appendTo("head")})}a.jqpath=a.jqpath||"http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js";(function(b){var c=document.createElement("script");c.type="text/javascript";c.src=b;c.onload=function(){e(a.css);d(a.js)};document.body.appendChild(c)})(a.jqpath)}; 

var loadBookmarklet = function(useUrl, useProvider) {
  shelbyBookmarklet.shelbyInit(shelbyBookmarklet.shelbyOpts, useUrl, useProvider);
};

(function(history) {
    var pushState = history.pushState;
    history.pushState = function(state) {
        if (typeof history.onpushstate == "function") {
            history.onpushstate({state: state});
        }
        for (var i = 0; i < shelbyBookmarklet.shelbyProviders.length; i++) {
            var domain_split = shelbyBookmarklet.shelbyProviders[i].domain.split(',');
            var valid_domain = false;
            for (var l = 0; l < domain_split.length; l++) {
                var domain_reg = new RegExp(domain_split[l]);
                if (domain_reg.test(window.location.href)) {
                    valid_domain = true;
                    break;
                }
            }
            if (valid_domain) {
                var providerObj = shelbyBookmarklet.shelbyProviders[i];
                if (providerObj.url_regex) {
                    if (new RegExp(providerObj.url_regex).test(window.location.href)) {
                        loadBookmarklet(true, providerObj.provider);
                        return pushState.apply(history, arguments);
                    }
                }
            }
        }
        if (!shelbyJ) {
          var shelbyJ = jQuery.noConflict();
        }
        shelbyJ('.<%=@prefix%>ext-elements').remove()
        return pushState.apply(history, arguments);
    }
  })(window.history);
loadBookmarklet(false);
